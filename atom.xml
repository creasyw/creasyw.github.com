<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Qiong Wu]]></title>
  <link href="http://creasyw.github.io/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2013-12-29T23:18:57-06:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LTE reading excerpt]]></title>
    <link href="http://creasyw.github.io/blog/2013/10/09/lte-reading-excerpt/"/>
    <updated>2013-10-09T18:21:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/10/09/lte-reading-excerpt</id>
    <content type="html"><![CDATA[<p>The LTE-Advanced introduced by LTE standard release 10 has many new features, including the carrier aggregation, enhanced intercell interferernce coordination (ICIC) for heterogeneous networks (HetNets), enhanced multiple-antenna transmission supporting up to eight downlink layers, and relaying and coordinated multipoint (CoMP) transmission.</p>

<p>For the carrier aggregation, in order to fully compliant with the IMT-Advanced requirements, the radio-access technology in LTE-Advanced does not only provide entensive support for deployment in spectrum allocations with bandwides ranging from 1 MHz to 20 MHz for backwards compatibility, but also extends by means of carrier aggregation, where multiple component carriers are aggregated and jointly used for transmission to/from a signle terminal. Up to five component carriers, possibly each of different bandwidth, can be aggregated, allowing for transmission bandwidth up to 100 MHz. The component carriers that a UE needs to support are determined through a UE-specific configuration process and a dynamic activation and deactivation process. Due to this activation/deactivation process, the state of SCells can be changed frequently. As a result, <strong>radio link monitoring is only supported in the PCell but not in SCells to avoid complex UE behavior and additional control signaling overhead. Despite this kind of effort, the increased complexity due to physical downlink control channel (PDCCH) decoding and timing tracking of multiple component carriers cannot be avoided</strong>. </p>

<p>The receiver RF filter design depends on the type of carrier aggregation. For the interest of low hardware complexity, a singular RF chain is preferable. But it requires an analog-to-digital converter and RF filter with larger bandwidth. Moreover, due to activation and deactivation of component carriers, there is a retuning issue when a single RF is used for these component carriers. <strong>There should be techniques balancing the packet loss due to RF retuning and the measurement of deactivated SCells to achieve optimal network performance</strong>.</p>

<p>A HetNet consists of low-power picocells and femtocells in addition to high-power macrocells to improve end-users QoS. But this benefit comes at the cost of additional intercell interference between heterogeneous cells, and some of the femtocells might be closed subscriber group, which make the strongest downlink power at the viewpoint of certain UE be the interference. Besides, the commeon reference signal (CRS), synchronization signals, and physical broadcast channel (PBCH) are transmitted in almost blank subframe (ABS), which cause the collision among different Scells. **The interference cancellation should developed based on the release 8/9 which soly considers the macrocell interference management through ABS.</p>

<p>The LTE-Advanced system should fulfill the ITU requirements of the downlink peak spectral efficiency of 30 b/s/Hz. The peak spectral efficiency is the highest achievable data rate per overall cell bandwidth assuming error-free conditions when all available radio resources for the corresponding link direction are assigned to a single UE unit. While two- or four-layer transmission would be more prevalent even for the LTE-Advanced system, the required downlink peak spectral efficiency can only be attained using high-order antenna configurations (i.e., 8 × 8). <strong>The main challenge of high-order multiple-input multiple-output (MIMO) is computational complexity</strong>. Maximum likelihood (ML) detection is optimal in the sense that it minimizes error probability when the distributions of all data are equally likely. However, due to its high complexity in 8×8 MIMO systems with high modulation order, a direct implementation of ML detection might not be a viable option for such MIMO systems.</p>

<p>The alternatives are zero-forcing (ZF) and minimum mean square error (MMSE) detection, but both of them are much worse in performance compared with ML. The k-best detection is another choice, but although its performance is close to ML, its computational complexity is still high to be implemented in the real-world multi-antennas configurations.</p>

<p>In the UE, channel estimation is for feeding back channel state information (CSI) to the base station and equalization of the downlink channel in the process of data demodulation. One of the requirements for LTE-Advanced is that it should support up to eight-layer transmission, which implies that there need to be at least eight transmit antenna ports. Toward this, a key change in the reference signal design philosophy from LTE Release 8 is the separation of the demodulation reference signals (DM-RS) from the channel state information reference signals (CSI-RS) in Release 10. The up-side is saving significant reference signal overhead since it allows the densely populated DM-RS to be UE-specific. The down-side is that in order to provide for eight CSI-RS patterns, the density of CSI-RS in LTE-Advanced is significantly less than that of CRS, that is, there is only one CSI-RS resource element (RE) per RB per antenna port. Besides, CSI-RS is expected to be transmitted only once every five or ten sub-frames. <strong>Advanced algorithms are needed for CSI-RS-based channel estimation and computation of the CSI feedback parameters such as CQI (i.e., modulation and coding rate) because existing methods may incur throughput degradation and/or result in a failure to meet the target BLER requirements.</strong> Possible strategies to improve the CSI-RS channel estimation performance could include exploitation of the time-frequency correlations, the channel’s power delay profile (PDP) and the Doppler shift. </p>

<p>[1] S. Parkvall, A. Furuskär, and E. Dahlman, “Evolution of LTE Toward IMT-Advanced,” <em>IEEE Commun. Mag.</em>, vol. 49, no. 2, pp. 84-91, Feb, 2011.<br />
[2] D. Bai, C. Park, J. Lee, and H. Nguyen, “LTE-advanced modem design: challenges and perspectives,” <em>IEEE Commun. Mag.</em>, vol. 50, no. 2, pp. 178-186, Feb. 2012.<br />
[3] E. Dahlman, S. Parkvall, and J. Sköld, <em>4G LTE/LTE-Advanced for Mobile Broadband</em>, Academic Press, 2011.<br />
[4] Z. Guo and P. Nilsson, “Algorithm and Implementation of the K-Best Sphere Decoding for MIMO Detection,” <em>IEEE JSAC</em>, vol. 24, no. 3, Mar. 2006, pp. 491–503.<br />
[5] M. Baker, <a href="http://www.3gpp.org/ftp/workshop/2009-12-17_ITU-R_IMT-Adv_eval/docs/pdf/REV-090003-r1.pdf">LTE Advanced Physical Layer</a>. <br />
[6] J. Wannstrom, <a href="http://www.3gpp.org/IMG/pdf/lte_advanced_v2.pdf">Introduction to LTE-Advanced</a>.   </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All-pairs shortest path]]></title>
    <link href="http://creasyw.github.io/blog/2013/09/30/johnsons-algorithm/"/>
    <updated>2013-09-30T23:49:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/09/30/johnsons-algorithm</id>
    <content type="html"><![CDATA[<p>The question comes from the online course <em>Algorithm Design and Analysis (Part II)</em> in coursera. It is an <a href="http://en.wikipedia.org/wiki/Shortest_path_problem#All-pairs_shortest_paths">all-pairs shortest path problem</a>. As mentioned in the wikipedia, a more straightforward solution with Floyd–Warshall algorithm takes \(O(N^3)\) complexity, and the more computational efficient approach is to use a combination of Dijkstra’s algorithm, Bellman-Ford algorithm, and Johnson’s algorithm, which chould decrease the complexity to \(O(N^2logN)\). I implement the latter one for more interesting and challenging. There are several obstacles make the implementation a little bit trickier than I thought.</p>

<p>I have tried two or three different versions of Dijkstra’s algorithm while solving other math puzzles, and this time I use the built-in heapq function in Python. Keeping the “about-to explore” nodes in order and extracting the smallest/largest cost one in every iteration are the essense of this algorithm. But the cost to every node has to be updated when a node moves from “about-to explore” to “fully explored” category. At first, I just remove the original value and push the updated one into the heap. Because the heapq has no updated or remove methods, I can only use the remove mehtod of the list. This works fine for small amount of nodes (200) but the heap cannot keep right struture when the data becomes just a little bigger (500). Then I have to <em>heapify</em> it every time I update a “about-to explore” node.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Dijkstra&#8217;s Algorithm</span><a href="https://github.com/creasyw/learning/blob/master/courses/algo_analysis_II/hw4/dijkstras.py">link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">dijkstras</span>(graph, start):
    <span class="comment"># keep a record of the distance of the nodes from the start vertex</span>
    distance = defaultdict()
    <span class="comment"># keep track of the candidates for the next move</span>
    index = defaultdict()
    <span class="comment"># store the cost and node into heap using cost as the key</span>
    heap = []
    heapq.heapify(heap)
    <span class="comment">#will be used to trace the path of the sjortest distance to each node</span>
    distance[start] = <span class="integer">0</span>
    <span class="keyword">if</span> start <span class="keyword">in</span> graph <span class="keyword">and</span> <span class="predefined">type</span>(graph[start])==<span class="predefined">dict</span>:
        <span class="keyword">for</span> (node, cost) <span class="keyword">in</span> graph[start].items():
            heap_update(heap, index, node, cost)
    <span class="keyword">else</span>:
        <span class="keyword">return</span> distance
    <span class="comment">#initially all nodes are yet to be explored</span>
    <span class="keyword">while</span> <span class="predefined">len</span>(index) &gt; <span class="integer">0</span>:
        <span class="comment"># need to extract the node with the minimum path</span>
        node, cost = heap_pop(heap, index)
        <span class="comment"># store the node into known graph</span>
        distance[node] = cost
        <span class="comment"># update the knowledge according to existing node</span>
        <span class="keyword">if</span> node <span class="keyword">in</span> graph <span class="keyword">and</span> <span class="predefined">type</span>(graph[node])==<span class="predefined">dict</span>:
            <span class="keyword">for</span> (node, localcost) <span class="keyword">in</span> graph[node].items():
                <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> distance:
                    heap_update(heap, index, node, localcost+cost)
    <span class="keyword">return</span> distance
</pre></div>
</div>
 </figure></notextile></div>

<p>The Bellman-Ford algorithm is more expensive compared with Dijkstra’s algirhtm if the graph is densily connected, but it deals with negative edge cost. This is also the one that helps me fully appreciate the dynamic programming.The implementation is intuitive and straightforward. For every vertex, the brutal force search performs to find the current optimal solution based on the previous knowledge. The optimization for space complexity is to only store the most recent result–keep an 2*N array and use a pointer filp-flop in every iteration is more effecient than keeping two 1*N array, discarding the older one and reclaiming a new one in every iteration. Aother optimization I make is to store the “about-to explore” nodes in a bucket, just as what Dijkstra’s does, which eliminates plenty of unnecessary calculation. But its tricky aspect is that because this algorithm is computing “distributed”, different from the “centralized” spanning of Dijkstra’s, if several “exploring” vertices point to a same “about-to explore” vertex, only the optimal cost should be kept.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Bellman-Ford Algorithm</span><a href="https://github.com/creasyw/learning/blob/master/courses/algo_analysis_II/hw4/bellman_ford.py">link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">bellman_ford</span> (arr, start, size):
    <span class="docstring"><span class="delimiter">&quot;&quot;&quot;</span><span class="content"> The input arr stores all info of the graph in a dictionary.</span><span class="content">
</span><span class="content">        The basic element in the arr are three-columns data -- </span><span class="content">
</span><span class="content">        [start_point, end_point, cost]</span><span class="delimiter">&quot;&quot;&quot;</span></span>
    count = <span class="integer">1</span>
    data = np.zeros((<span class="integer">2</span>, size+<span class="integer">1</span>))
    <span class="comment"># initialization</span>
    data.fill(<span class="predefined">float</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">inf</span><span class="delimiter">&quot;</span></span>))
    data[<span class="integer">0</span>, start] = <span class="integer">0</span>
    bucket = {}
    <span class="keyword">for</span> i <span class="keyword">in</span> arr[start]:
        bucket[i] = {start:arr[start][i]}
    
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>, size):
        <span class="comment"># use set() to make sure start points in the next round are unique</span>
        candidate = <span class="predefined">set</span>()
        previous = count ^ <span class="integer">1</span>
        data[count] = data[previous]
        <span class="keyword">for</span> v <span class="keyword">in</span> bucket:
            data[count, v] = <span class="predefined">min</span>(data[previous, v], \
                data[previous, bucket[v].keys()[<span class="integer">0</span>]] \
                +bucket[v].values()[<span class="integer">0</span>])
            candidate.add(v)
        <span class="comment"># stop early if there is no place to span</span>
        <span class="keyword">if</span> (data[count]==data[previous]).all():
            <span class="keyword">break</span>
        <span class="comment"># update the bucket</span>
        bucket = {}
        <span class="keyword">for</span> j <span class="keyword">in</span> candidate:
            <span class="keyword">for</span> k <span class="keyword">in</span> arr[j]:
                <span class="keyword">if</span> (k <span class="keyword">in</span> bucket <span class="keyword">and</span> data[count,j]+arr[j][k] &lt; \
                      data[count, bucket[k].keys()[<span class="integer">0</span>]] + \
                      bucket[k].values()[<span class="integer">0</span>]) <span class="keyword">or</span> k <span class="keyword">not</span> <span class="keyword">in</span> bucket:
                    bucket[k] = {}
                    bucket[k][j] = arr[j][k]
        <span class="keyword">if</span> <span class="keyword">not</span> bucket:
            <span class="keyword">break</span>
        count = previous
    
    <span class="comment"># check cycle with negative sum</span>
    previous = count ^ <span class="integer">1</span>
    data[count] = data[previous]
    <span class="keyword">for</span> v <span class="keyword">in</span> bucket:
        data[count, v] = <span class="predefined">min</span>(data[previous,v], \
                data[previous, bucket[v].keys()[<span class="integer">0</span>]]+bucket[v].values()[<span class="integer">0</span>])
    <span class="keyword">if</span> (data[count]== data[previous]).all():
        <span class="keyword">return</span> data[count]
    <span class="keyword">else</span>:
        <span class="keyword">return</span> <span class="predefined">float</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">inf</span><span class="delimiter">&quot;</span></span>)
</pre></div>
</div>
 </figure></notextile></div>

<p>Finally, the two algorithms above are connected by the Johnson’s algorithm. Dijkstra’s algorithm cannot deal with negative edge costs, but much more fast than Bellman-Ford especially in the case of “all-pairs”. Furthermore, the negative costs cannot be got rid of by adding uniformly for every edge. Johnson’s algorithm neatly solves it by adding pseudo-node to find weights of vertices and changing values of edges concerning their connected vertices. There is no hidden obstacle in the implementation. Only the special care should be taken for manipulating the nodes. It reminds me coding in C…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Johnson&#8217;s Algorithm</span><a href="https://github.com/creasyw/learning/blob/master/courses/algo_analysis_II/hw4/johnsons.py">link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">johonsons</span>(data, vertex):
    d1 = data.copy()
    <span class="comment"># make psedu node pointing to all other nodes with zero cost</span>
    plus1 = vertex+<span class="integer">1</span>
    d1[plus1] = {}
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>, plus1):
        d1[plus1][i] = <span class="integer">0</span>
    <span class="comment"># calculate the reweight vector</span>
    reweight = bellman_ford(d1, plus1, plus1)
    <span class="comment"># reweight all cost to make it nonnegative</span>
    <span class="keyword">if</span> <span class="predefined">type</span>(reweight) == <span class="predefined">float</span>:
        <span class="comment"># stop if there is any negative cycle in the graph</span>
        <span class="keyword">return</span> <span class="predefined-constant">None</span>
    <span class="keyword">else</span>:
        <span class="keyword">for</span> i <span class="keyword">in</span> data:
            <span class="keyword">for</span> k <span class="keyword">in</span> data[i]:
                data[i][k] = data[i][k]+reweight[i]-reweight[k]
    
    <span class="keyword">return</span> [<span class="predefined">min</span>(reconvert(reweight,vertex,dijkstras(data,i),i))\
            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>,vertex+<span class="integer">1</span>)]
</pre></div>
</div>
 </figure></notextile></div>

<p>The overall algorithm solves the question and runs kind of standard. Still, I do not satisfy with the update procedure of heap. I will write a new version of this data structure in the near future and see if it can provide significant boost for the performance.</p>

<p>p.s. The vistualization of code block is optimized from the original Octopress style to Github-style based on the <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">tutorial</a>.<br />
p.p.s. The inline latex-style formula comes with Kramdown, MathJax and <a href="http://yoyzhou.github.io/blog/2012/08/05/add-latex-support-for-octopress/">this tutorial</a>. Besides, there is <a href="http://brianbuccola.github.io/blog/2012-11-28-latex-math-in-octopress.html">another minor bug to deal with</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More freedom in doing things]]></title>
    <link href="http://creasyw.github.io/blog/2013/08/15/more-freedom-in-doing-things/"/>
    <updated>2013-08-15T00:15:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/08/15/more-freedom-in-doing-things</id>
    <content type="html"><![CDATA[<p>I heard lots of opinions from both Mac lovers and haters before I bought my macbook pro. It made me struggle for a while to leverage the pros and cons. But it finally turned out neither of them was completely right. I love my mbp very much, but the reason is not the good looking, but the flexibility interacting with unix programs and great ease using homebrew for almost all dependent packages. Besides, if I was not forced using Windows OS again in my internship, I would not notice how ugly and inconvenient it is.</p>

<p>The same process happened once again when I met latex. The final result was that I fell in love with it, and found out no one gave me a comprehensive description about it before.</p>

<p>LaTeX is more about higher-level accessing Tex for formating and typesetting. That is it. The focus for writing, the ease of math formulas, and even the licensing advantage over MS are all derivatives from others personal experiences. Actually, the basic intention gives it the most attractive feature. First of all, setting up a general framework, then maybe another subset of framework. The framework is at will, but everything fell into it must follow the specific rules. Then, beyond the framework, or within the framework, everything is also at will. One can freely design all specifications, and if needed, one can also overwrite the general rules set by the framework. On the one hand, the environment setting let author get rid of all trivial concerns. On the other hand, in every place, one can regain the control of everything. LaTeX is not only for writing, it is for programming.</p>

<p>Then, several days ago, I was trying to transfer my blog from Blogger to Jekyll. It is a static site generator that takes Markdown blog posts and onverts them into html files. The benefits are attractive: the website can be hosted by almost any server; the whole blog can easily be version controlled, since no php or MySQL needed, it requires less maintainance. During playing with it, I have the same kind of feeling again. I might easily mess everything up while on the other hand I have fully control of every element in the page.</p>

<p>I cannot build it without kind-hearted help from others. Especially,</p>

<ul>
  <li><a href="https://github.com/yanga9">Alex Yang</a>, who designs this theme. I really like the succinct layout and the Hello page. His comprehensive introductory email also saved me lots of time and gave me solid understanding of how jekyll and octopress work.</li>
  <li><a href="http://octopress.org/docs/setup/">Octopress: Getting started</a> and an <a href="http://labs.grupow.com/blog/2012/01/30/start-blogging-with-octopress">alternative post</a>. Provide fool-proof tutorials of setting things up. For the latter post, there is no need to insall Pow. The “rake preview” will get the result with <a href="http://stackoverflow.com/questions/17465404/rake-preview-not-working-in-octopress">one precaution</a>.</li>
  <li><a href="https://gist.github.com/juniorz/1564581">Import from Blogger</a>. This script was found from Jekyll official site.</li>
  <li><a href="http://conghui.github.io/2013/04/27/did-not-find-expected-key-while-parsing-a-block-mapping/">Rake Generate issue caused by double quotes</a>. The script above cannot well handle double quotes, which will cause problem when generating yaml. Here is the solution.</li>
</ul>

<p>Of course, there are some other things that I tried and failed to like. C++ might be an example… =P Anyway, my point is, regardless what other people say, you will never know what a thing really is unless you actually do it. There is one ultimate goal for a given project, and at least one suitable path to get there. Just do it. Then in retrospect, we will know if it is a better option, and will perform better the next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading note of SICP (4)]]></title>
    <link href="http://creasyw.github.io/blog/2013/08/10/reading-note-of-sicp-4/"/>
    <updated>2013-08-10T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/08/10/reading-note-of-sicp-4</id>
    <content type="html"><![CDATA[<div class='post'>
  Aug. 10th. Complete the 1st chapter of sicp.<br/><br/>
  
  I really appreciate the exercises within each subsections, because I can feel that they are well designed. I used to have the same feeling when I did the homework from Dan&#8217;s course of programming languages. The exercises make the general concepts concrete and doable.
  <br/><br/>
  The abstraction is far from merely making the code more structured and readable. It is a design choice. Sometimes, it takes experience to find out where should be abstracted. And sometimes, it takes much more endeavors than simply mix everything together. But once the choice of abstraction is right, the program becomes clearer, and it increases many degrees of freedom for the design afterwards.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading note of SICP (3)]]></title>
    <link href="http://creasyw.github.io/blog/2013/08/08/reading-note-of-sicp-3/"/>
    <updated>2013-08-08T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/08/08/reading-note-of-sicp-3</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp;<br />At the end of the 1st chapter, it enumerates the basic reason for the powerful lisp: first-order procedure.<br /><br />The major &#8220;privileges&#8221; of the first-order elements are:<br />1) They may be named by variables.<br />2) They may be passed as arguments to procedures.<br />3) They may be returned as the results of procedures.<br />4) They may be included in data structures.<br />They can be crucial abstraction mechanism permitting to express the general methods of computing as explicit elements in programming language, so that they can be handled just like other computational elements. The expression power is enormous.<br /><br />I have already been used to use the first two kinds of procedures, but the last two actually make the program even more expressive and powerful. Those are also the attractive properties sharing among functional programming languages.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading note of SICP (2)]]></title>
    <link href="http://creasyw.github.io/blog/2013/08/07/reading-note-of-sicp-2/"/>
    <updated>2013-08-07T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/08/07/reading-note-of-sicp-2</id>
    <content type="html"><![CDATA[<div class='post'>
<br />While I am reading, I always try to distinguish which part of thoughts I used to learn from here when I read it for the first time, and which part I learned from Dan&#8217;s course. And, surprisingly enough, I learned almost all basic factors from Dan, though I always felt I learned a lot of things last year when I began to read it.<br /><br />The name of this book is perfect for the content &#8211; Structure and Interpretation of Computer Programs. It does not teach about how to program, nor a specific programming language. Of course it is a legacy book. But it seems to me that I cannot get enough from this book unless I have mastered quite a few programming languages. After Dan taught me everything about basic aspects of programming languages and I played with Ruby and Racket for a long time, even after I leaned all those &#8220;nontrivial&#8221; trivial things about C++, when I read it now, I am able to distinguish which part is the essence and which part is written just for the ease of learning, and I can fully focus on how to put different abstractions into different layers&#8211; in other words, learning the structure and interpretation of computer programs.<br /><br />I read a comment, saying that Chapter 4 and 5 are the essence of the book. Hopefully, I can finish reading it before September, and leave enough time for Design Patterns.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading note of SICP]]></title>
    <link href="http://creasyw.github.io/blog/2013/08/06/reading-digest-sicp/"/>
    <updated>2013-08-06T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/08/06/reading-digest-sicp</id>
    <content type="html"><![CDATA[<div class='post'>
P59. I still don&#8217;t think it is necessary to use &#8220;square&#8221; instead of (* x x) everywhere we perform this operation, but I appreciate the idea of &#8220;abstraction&#8221;. It is really a good idea (and practice) to abstract concepts in different levels and use them accordingly.<br /><br />Most of the examples I read are in a top-down design manner: firstly use the abstract concepts, and then implement it in a lower level. The concerns for specific lower-level modules is similar to the way I did using unit test. But I am a little bit confuse how to perform the unit test in this manner. Especially for the closure using in LISP&#8211;implementing local helper functions right after building major function&#8211; how can I make sure the helper functions are right before I run the program as a whole? If I separate a helper function as an independent one, it seems that quite a little redundant work has to perform when I move it back to the major function.<br /><br />Anyway, SICP just makes me love Racket even more =D<br /><br />cheers,</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python/Numpy version collisions]]></title>
    <link href="http://creasyw.github.io/blog/2013/07/23/pythonnumpy-version-collisions/"/>
    <updated>2013-07-23T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/07/23/pythonnumpy-version-collisions</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp; <br />Before this accident, I did not even know there were so many places relevant with a single program&#8230; I opened the pandora&#8217;s box beginning with using <code>brew doctor</code> &nbsp;which told me to move directory /usr/local/bin/ prior to /usr/bin/ so that all the homebrewed packages could be found automatically. After I did this, if I executed matplotlib, I would have this runtime error <code>RuntimeError: module compiled against API version 8 but this version of numpy is 6</code>&nbsp;which was somewhat correct by the way. Because I used superpack installed the latest version of numpy(1.8), scipy(0.13), and matplotlib(1.4), but if I printed out the &#8220;numpy.__version__&#8221; in a script, it showed 1.6.1.<br /><br />1) delete all of the outdated versions of numpy<br />2) make sure I explicitly add PYTHONPATH in the bash_profile.<br />3) I even uninstalled and reinstalled the numpy<br />But the problem was still there.<br /><br />After an exhausted search, I found that numpy-1.6.1 in &#8220;/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/&#8221; WTF! I still don&#8217;t know why it search into 2.6 given there is another 2.7 in the same level of directory. Deleting both 2.6 and 2.7 directories (only delete the 2.6 could not work either&#8230;) finally solved the problem. ahooooo&#8230;.<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup emacs in Mac OS]]></title>
    <link href="http://creasyw.github.io/blog/2013/07/01/setup-emacs-in-mac-os/"/>
    <updated>2013-07-01T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/07/01/setup-emacs-in-mac-os</id>
    <content type="html"><![CDATA[<div class='post'>
<br />The setup is much harder than I thought&#8230;<br /><br />1) using homebrew installs the emacs and guile. Then, I also need to add path in the .bash_profile to launch the up-to-date emacs rather than the original version 22.1 shipped with the os.<br /><code>export PATH=/usr/local/Cellar/emacs/24.3/bin:$PATH</code><br />2) Enable the <a href="http://stackoverflow.com/questions/162896/emacs-on-mac-os-x-leopard-key-bindings">Meta key in terminal</a>, or similar position for iterm2.<br /><br />After these two steps, the following is more&nbsp;straightforward.<br /><br />3) I accidentally found this &#8221;<a href="https://github.com/technomancy/emacs-starter-kit">emacs-starter-kit</a>&#8221;, which had 2300+ stared and really saved my day. Just follow the instruction and everything will be fine.<br /><br />In current state, I feel emacs kind of like vim+tmux. Anyway, learning new knowledge is always a pleasure, especially about this kind of &#8220;legacy&#8221; stuff.<br /><br /><br />cheers,<br /><br />[UPDATE: after changed the loading sequence of bash in <code>/etc/paths/</code> the first step seems unnecessary&#8230; actually, that was something I should do as soon as I used homebrew to port packages.&nbsp;<a href="http://bit.ly/IUVl9a">http://bit.ly/IUVl9a</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ rants (continued)]]></title>
    <link href="http://creasyw.github.io/blog/2013/06/05/c-rants-continued/"/>
    <updated>2013-06-05T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/06/05/c-rants-continued</id>
    <content type="html"><![CDATA[<div class='post'>
(<a href="http://www.realworldtech.com/forum/?threadid=104299&amp;curpostid=104196">link</a>)<br /><br />&gt;Care to write an explicit example of a deep problem? (Except memory management - you already mentioned garbage collection.)<br /><br />Concurrency, for example.<br /><br />My point being, that C++ adds absolutely nothing interesting.<br /><br />&gt;All right. Then why do you think C should have support for structures (struct {&#8230;})?<br /><br />That&#8217;s just singularly stupid.<br /><br />C is a good language. It&#8217;s complete enough (and yes, the ability to handle structured data is very much required for any serious language) to be supremely useful, while at the same time being quite simple.<br /><br />A language without structured data types would not be a powerful language the way C is. You do need data structures, and you need pointers (to both data and code) to be at all interesting.<br /><br />But where do you draw the line?<br /><br />I know that you as a C++ proponent you probably won&#8217;t really &#8220;get&#8221; this simple argument, but try:<br /><br />- read the K&amp;R book on C (the ANSI edition), and be enlightened.<br /><br />Notice how the language is basically described by one rather thin book. Readably.<br /><br />So what C does so well is to do that whole &#8220;make it as simple as you can, but no simpler&#8221;. And that is what makes it great. The language is powerful, yet fairly minimal.<br /><br />There really aren&#8217;t many features you could remove from the C language without crippling it. Sure, there&#8217;s<br />three different looping constructs, and you could make trivial (syntactic) changes to the language, but that&#8217;s<br />really not the point. The language is simple, but without being too simple.<br /><br />Now, that&#8217;s not what you always want. I understand very well why people want less system-oriented languages with more built-in functionality. As mentioned, support for both garbage collection and concurrency are quite real problems, and they are both things you can do in C, but that you cannot do well with library interfaces, which is how you normally would extend on C.<br /><br />And garbage collection and concurrency are way more than just syntactic extensions. You can still do them very badly, of course, so it&#8217;s not a trivial path to go down, and I&#8217;m not saying hat a language magically becomes &#8220;good&#8221; just from supporting one or the other.<br /><br />But again: C does what it does very well, and with a clarity of thought and design that is entirely and utterly lacking from C++.<br /><br />And yes, I happen to think that clarity of thought and design is a good thing. It&#8217;s why I liked UNIX, even though I was initially introduced to other things (VMS - ugh).<br /><br />C++ is a mess. There&#8217;s no design. It&#8217;s just &#8220;add crud on top of C&#8221;. And the crud isn&#8217;t even meaningful, much less does it have a design. It&#8217;s totally and utterly random.<br /><br />It started out random, now it&#8217;s randomness that gets added to by a committee.<br /><br />&gt;For example, namespaces and function overloading are *not*<br />&gt;useless. They *do* solve a real problem that C is incapable<br />&gt;of solving.<br /><br />You&#8217;re full of it.<br /><br />&gt;For example, if you want in your source code to define a<br />&gt;function called &#8220;connect&#8221; and you also want include<br />&gt;&#8221;sys/socket.h&#8221;, you cannot do that in C.<br /><br />So to prove how it&#8217;s not just a syntactic feature, you start talking about syntax?<br /><br />What drugs are you on?<br /><br />The name overloading is a total syntactic feature. In C, the way you fix your problem is by a totally trivial syntactic change: you call your function &#8220;my_connect()&#8221;.<br /><br />Wow. It&#8217;s like magic. I added three characters, and made your whole reason for the crap that is C++ go away.<br /><br />The thing is, the above is a really good example of why C++ is horrible, and why C is so simple.<br /><br />Yes, the C solution is really simple. It&#8217;s so simple that it looks downright stupid. But it&#8217;s actually so simple that it is smart because quite frankly, it&#8217;s a lot easier to get confused in C++ code, when the same function name means totally different due to overloading.<br /><br />Of course, you&#8217;re not &#8220;supposed&#8221; to overload things in confusing ways, but the thing is, just do what C does: just make your function names unique. It&#8217;s not that hard, and by avoiding the overloading mess, you make it a lot easier to search for (hey look! &#8220;grep -w my_connect&#8221; just works!), and you avoid ambiguity.<br /><br />(Same exact thing goes for your other example: just add a module prefix or have some other trivial naming rules for your functional split-up, and be happy)<br /><br />Linus<br /><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ rants]]></title>
    <link href="http://creasyw.github.io/blog/2013/06/05/c-rants/"/>
    <updated>2013-06-05T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/06/05/c-rants</id>
    <content type="html"><![CDATA[<div class='post'>
By&nbsp;<span style="background-color: white; font-family: arial, sans-serif;">Linus Torvalds:</span><br /><br /><a href="http://thread.gmane.org/gmane.comp.version-control.git/57643/focus=57918">On Wed, 5 Sep 2007</a>, Dmitry Kakurin wrote:<br />&gt;<br />&gt; When I first looked at Git source code two things struck me as odd:<br />&gt;1. Pure C as opposed to C++. No idea why. Please don&#8217;t talk about portability,<br />&gt;it&#8217;s BS.<br /><br />*YOU* are full of bullshit.<br /><br />C++ is a horrible language. It&#8217;s made more horrible by the fact that a lot of substandard programmers use it, to the point where it&#8217;s much much easier to generate total and utter crap with it. Quite frankly, even if the choice of C were to do *nothing* but keep the C++ programmers out, that in itself would be a huge reason to use C.<br /><br />In other words: the choice of C is the only sane choice. I know Miles Bader jokingly said &#8220;to piss you off&#8221;, but it&#8217;s actually true. I&#8217;ve come to the conclusion that any programmer that would prefer the project to be in C++ over C is likely a programmer that I really *would* prefer to piss off, so that he doesn&#8217;t come and screw up any project I&#8217;m involved with.<br /><br />C++ leads to really really bad design choices. You invariably start using the &#8220;nice&#8221; library features of the language like STL and Boost and other total and utter crap, that may &#8220;help&#8221; you program, but causes:<br /><br />&nbsp;- infinite amounts of pain when they don&#8217;t work (and anybody who tells me that STL and especially Boost are stable and portable is just so full &nbsp;of BS that it&#8217;s not even funny)<br /><br />&nbsp;- inefficient abstracted programming models where two years down the road you notice that some abstraction wasn&#8217;t very efficient, but now all your code depends on all the nice object models around it, and you cannot fix it without rewriting your app.<br /><br />In other words, the only way to do good, efficient, and system-level and portable C++ ends up to limit yourself to all the things that are basically available in C. And limiting your project to C means that people don&#8217;t screw that up, and also means that you get a lot of programmers that do actually understand low-level issues and don&#8217;t screw things up with any idiotic &#8220;object model&#8221; crap.<br /><br />So I&#8217;m sorry, but for something like git, where efficiency was a primary objective, the &#8220;advantages&#8221; of C++ is just a huge mistake. The fact that we also piss off people who cannot see that is just a big additional<br />advantage.<br /><br />If you want a VCS that is written in C++, go play with Monotone. Really. They use a &#8220;real database&#8221;. They use &#8220;nice object-oriented libraries&#8221;. They use &#8220;nice C++ abstractions&#8221;. And quite frankly, as a result of all these design decisions that sound so appealing to some CS people, the end result is a horrible and unmaintainable mess.<br /><br />But I&#8217;m sure you&#8217;d like it more than git.<br /><br /><span class="Apple-tab-span" style="white-space: pre;">   </span>Linus<br /><br />=====<br /><br />Heath Provost (galvanash@hotmail.com) on 6/5/10 wrote:<br />&gt;<br />&gt;As for C++ exceptions - the same thing really applies here.<br />&gt;They are trying to write explicit code. Exceptions are the<br />&gt;poster child for implicit magic&#8230;<br /><br />Yes, exceptions is a good example. The Linux kernel actually does its own exception mechanism, exactly because that way we control what is going on (and do it much more targeted to the actual need in question while giving much better performance and avoiding the crazy unwinding issues).<br /><br />And I really do dislike C++. It&#8217;s a really bad language, in my opinion. It tries to solve all the wrong problems, and does not tackle the right ones. The things C++ &#8220;solves&#8221; are trivial things, almost purely syntactic extensions to C rather than fixing some true deep problem.<br /><br />(The C++ objects, templates and function overloading are all just syntactic sugar. And generally bad syntax at that. And C++ actually makes the C type system actively worse.)<br /><br />In non-systems programming, you should almost certainly use a language that offers garbage collection. That will possibly make a real difference in the complexity of your application. The C++ features? Largely useless, and just helps you screw up more.<br /><br />And in systems programming, you&#8217;re simply better off with C. You&#8217;ll have a way easier time using all the existing code and libraries out there (re-using C++ code? Good luck). Fewer headaches, fewer opportunities to mess up the design and pick some unstable template library.<br /><br />So in neither case is C++ likely the right choice.<br /><br />Linus<br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[excerpt from Effective C++]]></title>
    <link href="http://creasyw.github.io/blog/2013/06/04/excerpt-from-effective-c/"/>
    <updated>2013-06-04T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/06/04/excerpt-from-effective-c</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp; <br />Cpp is like some stubborn old man, who always says &#8220;i have lots of obscure habits, dealing with it&#8221;&#8230;&#8230;<br /><br /><b>Lesson 4:</b> the initialization is different from assignment, as well as their representations respectively. It is better to write the constructor as the form of initialization, named &#8220;initialization list&#8221;, rather than just simply give the variables first assignment.<br /><br />To avoid using objects before they&#8217;re initialized, then, you need to do only three things. First, manually initialize non-member objects of built-in types. Second, use member initialization lists to initialize all parts of an object. Finally, design around the initialization order uncertainty that afflicts non-local static objects defined in separate translation units.<br /><br /><b>Lesson 7</b>: declare destructors virtual in polymorphic base classes. C++ specifies that when a derived class object is deleted through a pointer to a base class with a non-virtual destructor, results are undefined. What typically happens at runtime is that the derived part of the object is never destroyed. Eliminating the problem is simple: give the base class a virtual destructor. Then deleting a derived class object will do exactly what you want. It will destroy the entire object, including all its derived class parts.<br /><br />The purpose of virtual functions is to allow customization of derived class implementations. Any class with virtual functions should almost certainly have a virtual destructor. The implementation of virtual functions requires that objects carry information that can be used at runtime to determine which virtual functions should be invoked on the object. On the other hand, if a class does not contain virtual functions, that often indicates it is not meant to be used as a base class. When a class is not intended to be a base class, making the destructor virtual is usually a bad idea.<br /><br /><b>Lesson 9</b>: Never call virtual functions during construction or destruction. Because during base class construction of a derived class object, the type of the object is that of the base class. Not only do virtual functions resolve to the base class, but the parts of the language using runtime type information (e.g., dynamic_cast (see Item 27) and typeid) treat the object as a base class type.<br /><br />The same reasoning applies during destruction. Once a derived class destructor has run, the object&#8217;s derived class data members assume undefined values, so C++ treats them as if they no longer exist. Upon entry to the base class destructor, the object becomes a base class object, and all parts of C++ treat it that way.<br /><br />Since you can&#8217;t use virtual functions to call down from base classes during construction, you can compensate by having derived classes pass necessary construction information up to base class constructors instead.<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set up Racket for Vim and mac Terminal]]></title>
    <link href="http://creasyw.github.io/blog/2013/02/19/set-up-racket-for-vim-and-mac-terminal/"/>
    <updated>2013-02-19T00:00:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2013/02/19/set-up-racket-for-vim-and-mac-terminal</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp; <br />Racket is fairly great:), though the setting up procedure is kind of twisted. There is a .dmg installation file in the official website, which makes it quite straightforward to install in the Application folder. And, of course, the DrRacket app is awesome when I accidentally put mouse in one of the variables in the code, and then all its dependencies reveal via arrows.<br /><br />But I am still used to writing code in vim and testing it in a parallel split window of iterm. I googled the solution, but cannot find a comprehensive one. So, I just list my solution here, which come from either stackoverflow or other persons&#8217; blogs.<br /><br />1) vim syntax and highlight are <a href="https://github.com/wlangstroth/vim-racket">out there</a> ready for use.<br /><br />2) Adding one command line to ~/.vimrc<br /><code>&nbsp;au BufRead,BufNewFile *.rkt set filetype=racket</code><br />3) Adding the path of executable racket to ~/.bach_profile.<br /><code> export PATH=$PATH:/Applications/Racket\ v5.3.3/bin/</code><br />4) If using the existing file, one should delete the first line of code &#8220;#lang racket&#8221; if existed.<br /><br />5) Optional. Installing rlwrap to make the repl more user friendly.<br /><br />That is much of it.<br /><br /><br />cheers,</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1st update in 2013]]></title>
    <link href="http://creasyw.github.io/blog/2013/02/14/1st-update-in-2013/"/>
    <updated>2013-02-14T00:00:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2013/02/14/1st-update-in-2013</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp; <br />The issue came from <a href="http://stackoverflow.com/questions/14828945/python-several-callings-of-function-containing-recursions-cause-runtimeerror">my question in stackoverflow</a>. Basically, it was a misplaced question, because the reason why my program would hit the &#8221;<span class="typ" style="border: 0px; color: #2b91af; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin: 0px; padding: 0px; vertical-align: baseline;">RuntimeError</span><span class="pun" style="border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin: 0px; padding: 0px; vertical-align: baseline;">:</span><span class="pln" style="border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin: 0px; padding: 0px; vertical-align: baseline;"> maximum recursion depth exceeded</span>&#8221; was that I just passed the sorted array by the first scenario to the second scenario. This caused the second one hit the &#8220;worse case&#8221; and exceed the &#8220;maximum recursion depth&#8221;. Well&#8230; it was embarrassing to admit that I forgot dereferencing the variable&#8230;<br /><br />But, anyway, the question concerning recursion in Python has been in my head for a while, even since I started learning Scheme. This time, the kind answer below my question shed lights on how to solve this kind of problem. Then I dug a little deeper and find more about tail recursion in Python.<br /><br />The following is an example with problematic way to implement a recursion&nbsp;function:<br /><br /><pre class="default prettyprint prettyprinted" style="background-color: #eeeeee; border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow: auto; padding: 5px; vertical-align: baseline; width: auto;"><code style="border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; margin: 0px; padding: 0px; vertical-align: baseline;"><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">def</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> fac</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">):</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />    </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">return</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">1</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">if</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> n </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">&lt;</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">2</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">else</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> n </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">*</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> fac</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">-</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">1</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">)</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br /><br /></span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">&gt;</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> fac</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">3000</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">)</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br /></span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">&gt;</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="typ" style="background-color: transparent; border: 0px; color: #2b91af; margin: 0px; padding: 0px; vertical-align: baseline;">RuntimeError</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">:</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> maximum recursion depth exceeded</span></code></pre><br />The right way to do this is to make a local helper function &#8220;tail recursive&#8221; with the help from anonymous function.<br /><br /><pre class="default prettyprint prettyprinted" style="background-color: #eeeeee; border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow: auto; padding: 5px; vertical-align: baseline; width: auto;"><code style="border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; margin: 0px; padding: 0px; vertical-align: baseline;"><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">def</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> fac</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">):</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />    </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">def</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> f</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">,</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> acc</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">):</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />        </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">return</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> acc </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">if</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> n </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">&lt;</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">2</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">else</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">lambda</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">:</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> f</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">-</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">1</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">,</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> acc </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">*</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> n</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">)</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br /><br />    t </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">=</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> f</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">,</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> </span><span class="lit" style="background-color: transparent; border: 0px; color: maroon; margin: 0px; padding: 0px; vertical-align: baseline;">1</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">)</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />    </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">while</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> callable</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">t</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">):</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />        t </span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">=</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> t</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">()</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />    </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">return</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> t</span></code></pre><br />And an even elegant&nbsp;way is to use built-in function &#8220;reduce&#8221;:<br /><br /><pre class="default prettyprint prettyprinted" style="background-color: #eeeeee; border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow: auto; padding: 5px; vertical-align: baseline; width: auto;"><code style="border: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; margin: 0px; padding: 0px; vertical-align: baseline;"><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">def</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> fac3</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">(</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">n</span><span class="pun" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;">):</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"><br />    </span><span class="kwd" style="background-color: transparent; border: 0px; color: darkblue; margin: 0px; padding: 0px; vertical-align: baseline;">return</span><span class="pln" style="background-color: transparent; border: 0px; margin: 0px; padding: 0px; vertical-align: baseline;"> reduce(lambda x,y:x*y, xrange(1,n))</span></code></pre>The latter two could deal with any input number. Tada~<br /><br />A little extended reading about this topic:<br /><a href="http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html">Origins of Python&#8217;s &#8220;Functional&#8221; Features</a><br /><a href="http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html">Tail Recursion Elimination</a><br /><a href="http://metapython.blogspot.com/2010/11/tail-recursion-elimination-in-python.html">Tail Recursion Elimination in Python</a><br /><br /><div>Besides, studying Standard ML does give me much much more insights into both programming itself and programming in Python. Except the attractive tail recursion, Python has quite a few amazing features of functional programming. &nbsp;In retrospect, now I appreciate more about what was listed in the &#8221;<a href="http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru">progression path</a>&#8221;, and of course, cannot wait to progress to Haskell.</div><br /><br /><br /><br /><br />cheers,</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install opencv in mac osx]]></title>
    <link href="http://creasyw.github.io/blog/2012/10/04/install-opencv-in-mac-osx/"/>
    <updated>2012-10-04T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/10/04/install-opencv-in-mac-osx</id>
    <content type="html"><![CDATA[<div class='post'>
The most straightforward way is via homebrew.<br /><code>brew update <br />sudo brew install opencv</code><br />Then, all of the dependencies will be install with opencv. The reason to use &#8220;sodu&#8221; is because there will be twice &#8220;brew link&#8221; used in the process which could not link certain libraries without permission.<br /><br />Finally, the brew gave a wrong file to update. Instead of updating .profile, the correct destination should be .bash_profile. Add this line:<br /><code>export PYTHONPATH=/usr/local/lib/python2.7/site-packages/:$PYTHONPATH&lt;\code&gt;</code><br /><br />That is it.<br /><br /><br />cheers,</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[missing you]]></title>
    <link href="http://creasyw.github.io/blog/2012/09/17/missing-you_17/"/>
    <updated>2012-09-17T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/09/17/missing-you_17</id>
    <content type="html"><![CDATA[<div class='post'>
<br />小葛儿转眼安排好纽约面试就登飞机了。因为GPS的缘故，在机场周围转了好几圈，结果弄的再见都匆匆忙忙。送完她回到寝室——是的，没有了她，这里还是叫寝室合适——空荡荡的，安安静静。一分钟都不想多停留，背着书包就去了实验室。<br /><br />晚上也不想回去，因为想到又是空空的房间就不自在。<br /><br />一个人在这里。忽然一下安静了。多出了好多时间来想你，似乎一切记忆瞬间无比清晰，触手可及。你的肩膀软软的，抱在怀里的时候，还要告诉自己小心别把你弄疼了。你哭的时候，撅着嘴，鼻子里些许呜哝呜哝的声音，眼泪扑簌扑簌就落下来了。你笑的时候，眼睛眉毛嘴角都弯弯的，咯咯咯的，清脆悦耳。每到这个样的时候，我都在反问自己，为什么要和你吵架啊，有什么气好生呢。<br /><br />可无论怎么吵架，我都还是爱你的，比每一次吵架前还要爱你，比每一次生气之前还要更想和你在一起。有时候会想，也许我太把你说的每句话当回事儿了，才会又好多的弄巧成拙。但翻回头来，我仍就欠你好多在一起的时光。<br /><br />小葛儿啊。你的一举一动，一颦一笑，我都记在心里呢。欠你的那些时光，我也一定要都好好还你。快回来吧。有你在的地方，我就认为是家了。<br /><br />我想你。<br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My August and a new beginning]]></title>
    <link href="http://creasyw.github.io/blog/2012/09/14/my-august-and-new-beginning/"/>
    <updated>2012-09-14T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/09/14/my-august-and-new-beginning</id>
    <content type="html"><![CDATA[<div class='post'>
<br />八月份，是个开始的月份，来到了一个小屯子里，没有公交，没有市集，只是明晃晃的阳光，会照的人发晕。当真是个修行的地方。有关这里，想法都有关不要虚度光阴，要快些离开这里。<br /><br />月中，和大瀾、乌龟、聪哥、温总一起去了黄石，西雅图，以及波特兰。这次旅行，如同酿酒发酵一般，越到后来越是留恋。<br /><br />刚到Bozman的时候，大瀾看着大山都激动的手舞足蹈。然后进入黄石以后，各种臭泉以及异常干燥的气候弄的大家都越发烦躁起来。大瀾背着手，像居委会大妈一样视察颜色异常的泉水；也会二劲儿大发，摘下花来给每个人带上，拍个大头贴。大乌龟在走trail时候，被路上唯一的一个钉子扎破了后背。甩着舌头奔跑的牦牛，成群在树林里休息的大鹿，elk or moose。在大峡谷的晚上，八月间，大家竟然都被冻醒了，我迷迷糊糊间，看着大瀾给我盖被子，感动了好久。<br /><br />三日后的大提顿满是惊喜。前一天晚上大瀾肚子疼的没吃好晚饭，扶她回房间后，我连吃饭的心思都没有了，更不要说后一天的提顿之旅。第二天早晨，大家也是有懒床的，有睡回笼觉的。只有唯一想去的温总，一肚子郁闷说不出口。而且刚启程，就发现没带门票，又折回。我开着车都能想到留守的聪哥似笑非笑的的得意样子。最终正午才进入大提顿，就遇见了满眼惊喜。厚厚的草甸，飘满小花的湖泊。大瀾拄着两人多长的树枝照相。在Jackson Lake租船的时候，旁边的小孩儿们兴奋的举着水瓶，炫耀捉住的水蛭。大瀾在船上，看不出任何身体异样，兴奋的拍水，尝试各种怪异的划船方法，几次都殃及到了坐在后面的我。但不管怎样，我俩划起船来，左右开工，还喊着号子，小船乘风破浪的指那儿打哪儿，相比而言，乌龟和温总的另一艘船大多就是在原地打转了。上岸之后，我们还在岸边的饭馆儿吃了进黄石以来最丰盛的一顿饭。在Jenny Lake，看着一湖清水，我和温总都脱到只剩内裤，跳进去玩水，结果上岸时候悲剧了，小石子们就像是锥子一样，走向岸边每一步都钻心的疼。。。大瀾在岸边，一边叹息着想游泳啊想游泳，一边带着乌龟和温总的俩单反，不断练习摄影技术。傍晚看日落，所有的山峰都一览无余，感慨自然壮丽。然后在把车开到山间处，再看一遍日落，再感慨一遍。晚上回程，看到了过马路的小狐狸，也许是被车灯照迷糊了，久久不离去，真想把它抱回来养。<br /><br />晚上回到酒店，又出门，和大瀾并排躺在码头上，我第一次清楚看到了银河，像棉絮一样一团一团的，还看到了流星。拉着大瀾的手，看着奇妙的景色，时间就静止了。<br /><br />到西雅图的第一天晚上，还有更多的惊喜。从倾斜的街道看到大海，身旁小酒馆门庭若市。城市真好。也是在这个时候，我们发现Yelp的预算对我们不适用。$的我们可以吃成$$$，$$的我们能吃成$$$$的。几个难民坐在日式料理最靠窗的桌子，烤肉、寿司、炒饭、拌面&#8230;，我们狼吞虎咽的样子，就是这家店最好的活体广告了。酒馆、小肥羊、牛逼的图书馆、大麻公园、面海公寓、满是鲜花的阳台，这就是我对西雅图的印象。<br /><br />去波特兰是因为Grimm。精致的block，友好的大瀾校友，以及玫瑰花园。我们在市区停留只有半日。然后就是一个小时的公车，从二十几街坐到了245街。。作为这座庄园里唯一一队乘坐公车前来的客人，我们受到了主人的热情接待，安排我们住宿在一个墙上画着这个庄园某位109岁员工的房间里。庄园的晚饭不错，温总一时兴起喝了六七杯或者十来杯红酒，结果把大乌龟给喝醉了，嚷嚷着要脱衣服去游泳，又把聪哥紧张的如同被非礼了一样。。晚饭后我们还视察了庄园的绿化状况，并亲切会见了酒馆里的各种奇怪大叔大妈。<br /><br />转眼相聚就要分离，回家的回家，旅行的继续上路，确实舍不得另外三位。昨天在豆瓣上读到马克吐温的一句话，“好友、好书，不轻易判断是非，这就是理想生活”。一路上颠簸，没读什么书，这生活却以足以让我留恋了。<br /><br />在这里，开始学习工作快满一月了。老板人不错，几次问他有关研究的问题，他都很耐心的回答，给的方法也足够有操作性。今天一个师兄作报告被骂，也从另一个侧面证明老板足够聪明，不能唬弄。组里大家关系也很融洽，实验室、图书馆，资源也算充裕。新车也用的顺手。还是开始时的那个想法，不要浪费时间，早些离开这里。</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valve recruiting sidenotes]]></title>
    <link href="http://creasyw.github.io/blog/2012/06/12/valve-recruiting-sidenotes/"/>
    <updated>2012-06-12T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/06/12/valve-recruiting-sidenotes</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp;&nbsp; <br />• Would I want this person to be my boss?<br />• Would I learn a significant amount from him or her? <br />• What if this person went to work for our competition? <br /><br />Across the board, we value highly collaborative people. That means people who are skilled in all the things that are integral to high-bandwidth collaboration—people who can deconstruct problems on the fly, and talk to others as they do so, simultaneously being inventive, iterative, creative, talkative, and reactive. These things actually matter far more than deep domain-specific knowledge or highly developed skills in narrow areas. This is why we’ll often pass on candidates who, narrowly defined, are the “best” at their chosen discipline.<br /><br />We value “T-shaped” people. That is, people who are both generalists (highly skilled at a broad set of valuable things—the top of the T) and also experts (among the best in their field within a narrow discipline—the vertical leg of the T).<br /><br />This recipe is important for success at Valve. We often have to pass on people who are very strong generalists without expertise, or vice versa. An expert who is too narrow has difficulty collaborating. A generalist who doesn’t go deep enough in a single area ends up on the margins, not really contributing as an individual.<br /><br />reference: <a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf">Valve handbook</a><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[General posts about Lisp]]></title>
    <link href="http://creasyw.github.io/blog/2012/06/04/general-posts-about-lisp/"/>
    <updated>2012-06-04T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/06/04/general-posts-about-lisp</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp;&nbsp; <br />Paul Graham: <a href="http://lib.store.yahoo.net/lib/paulgraham/jmc.ps">The Roots of Lisp (ps)</a>, <a href="http://www.paulgraham.com/diff.html">What Made Lisp Different</a> (<a href="http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html">Chinese translation</a>), and his <a href="http://www.paulgraham.com/lisp.html">collection</a>.<br /><a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">The Lisp Curse</a> by Rudolf Winestock <br /><a href="http://lists.warhead.org.uk/pipermail/iwe/2005-July/000130.html">Why Lisp macros are cool, a Perl perspective </a><br /><a href="http://www.defmacro.org/ramblings/lisp.html">The Nature of Lisp</a><br /><a href="http://www.dreamsongs.com/Files/LispGoodNewsBadNews.pdf">Lisp: Good News, Bad News, How to Win Big (pdf)</a><br /><a href="http://www.lambdassociates.org/blog/bipolar.htm%20">The Bipolar Lisp Programmer</a><br /><a href="http://www.informatics.sussex.ac.uk/research/groups/nlp/gazdar/nlp-in-lisp/index.html%20">Natural Language Processing in Lisp (book)</a><br /><a href="http://www.cs.rpi.edu/academics/courses/fall05/ai/scheme/tips.html">Tips for using Scheme and debugging your code</a><br /><a href="http://coolshell.cn/articles/7526.html">Lisp的永恒之道</a> (Chinese)<br /><br /><br />A <a href="http://itasoftware.com/careers/work-at-ita/ita-engineering.html?catid=#">great explanation</a> from ITA Software about why and how to use different languages, including Lisp (CL), Python, Java, and C/C++. <br /><blockquote class="tr_bq">Lisp is a programmable programming language, and one of the few languages that can be used for a wide range of applications. At ITA we have projects with vastly different focus, and it&#8217;s precisely Lisp&#8217;s versatility that makes it so useful to us. Lisp allows us to define a wide variety of abstractions to manage the complexity, and at the same time we get the speed we want - and our customers demand.<br /><br />While most of ITA&#8217;s algorithm-intensive code is implemented in high-level languages like Lisp, we use C/C++ to provide system support to our Lisp-based applications where the Common Lisp runtime support is inadequate. For instance, we represent large static datasets as densely packed arrays stored in files. We use C++ to make the mmap() calls and fetch pointers into these mappings for Lisp to access.<br /><br />Once in a while, we have had a hard time fooling the Lisp compiler into generating sufficiently fast machine code for a given function. When that happens, we can usually just rewrite the function in C++ and call it from Lisp.</blockquote>and&#8230; <a href="http://www.paulgraham.com/carl.html">quote from an email</a> of Carl de Marcken from Paul: <br /><blockquote class="tr_bq">A lot of our Lisp is designed to compile into very efficient assembly. We make a lot of use of Lisp&#8217;s macro capabilities, but shy away from many other Lisp features like closures, generic functions, complex sequence functions and garbage collection. We&#8217;re doing an incredible amount of computation - getting 10 seconds on a modern machine is an incredible gift - but if we&#8217;re sloppy at all 10 seconds can turn into ten minutes, not adequate for a travel agent or web site. We disassemble most every Lisp function looking for inefficiencies and have had both CMUCL and Franz enhanced to compile our code better.<br /><br />We&#8217;ve had very little trouble getting non-Lisp programmers to read and understand and extend our Lisp code. The only real problem is that the training most programmers have in Lisp has taught them to code very inefficiently, without paying any attention to the compiler. Of course, with things like STL and Java, I think programmers of other languages are also becoming pretty ignorant.</blockquote><br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HD and SICP]]></title>
    <link href="http://creasyw.github.io/blog/2012/05/16/hd-and-sicp/"/>
    <updated>2012-05-16T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/05/16/hd-and-sicp</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp;&nbsp; <br />Humming Identification. <br /><br />已然经历了两次较大的重建，现在的中段程序应该算是稳定了，前段程序接近黔驴技穷了，后段程序最后一次大修改后还在服务器里面跑着。出结果之后再用一两天时间整理，然后再看看清唱部分的阈值应该如何处理。不出意外的话，这就接近世界先进水平了:)<br /><br />现在回头看来，其实真正值得研究的部分还是在最初的参数提取。SIFT里面对于图像的各种锥形不变、边框加深、棱角过滤，对于音频信号都是不适用的。而语音信号的频谱重复或者音乐信号的长时重复在哼唱识别中又是不适用的。所以现在只能使用较为原始的 local maximum cascade filtering。若是频谱图能如图像般的直观，有些经验总结的东西在里面，就好了。<br /><br /><br />SICP<br /><br />思考过一段时间的结果，<a href="http://coolshell.cn/articles/6639.html">因为有了电据就少用到电钻</a>，于是熟练了Py也就先放放ruby了。转过身来硬着头皮读这本书。而第一天读过前言，我就知道这决不会是个令我后悔的决定。无数人的推荐，自然是有其中道理的。而把读过的几本经典书籍横向比较，会发现它们都会刻意避开很多fancy的概念，着力强调着那些在设计程序过程中永恒不变的东西。K&amp;R把C的很多基本库函数都重建了一遍，而SICP更是从加减乘除开始重构。<br /><br />开始读书之前，我也刻意找了一下CL和Scheme的对比。记得有个人说，如果想用Lisp做项目，CL更合适；想体会编程的乐趣，Scheme更合适，只是，它的核实在是太简单了。几个月看下来，其对于Scheme的评价当真实字字珠玑。这是一个无比强大的语言，data abstraction &amp; procedure abstraction，之后再抹去两者的差别，都只是当作object处理。看到这里，我会有错觉，认为自己都可以来设计Clojure了，这简直就是顺理成章的事情！tail recursion，比循环更加直观易懂，而更牛逼的是这竟然不会按照stack的模式迭代后增加内存的占用。至于enclosure和lambda calculus，在Python里面也有借鉴，但是我是直到这里才真正学会了如何使用它们⋯⋯当然，我很清楚这些词汇推砌起来的仍然仅仅是些皮毛。里面很多在程序设计时的考虑，才是更需要我好好体会的。<br /><br /><br />BTW, 今天的时间累计到2800了~<br /><br />cheers, <br /><br /></div>
]]></content>
  </entry>
  
</feed>
