<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Qiong Wu]]></title>
  <link href="http://creasyw.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2014-11-10T08:24:24-06:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wired In and Schedule Sequential Workflow]]></title>
    <link href="http://creasyw.github.io/blog/2014/09/24/wired-in-and-schedule-sequential-workflow/"/>
    <updated>2014-09-24T16:43:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2014/09/24/wired-in-and-schedule-sequential-workflow</id>
    <content type="html"><![CDATA[<p><strong><a href="https://gettingreal.37signals.com/ch07_Alone_Time.php">Alone Time</a></strong></p>

<blockquote>
  <p>Set up a rule at work: Make half the day alone time. — A successful alone time period means letting go of communication addiction. During alone time, give up instant messengers, phone calls, and meetings. Avoid any email thread that’s going to require an immediate response. Just shut up and get to work.</p>
</blockquote>

<p><strong><a href="http://www.paulgraham.com/makersschedule.html">Maker’s Schedule</a></strong></p>

<blockquote>
  <p>When we were working on our own startup, back in the 90s, I evolved another trick for partitioning the day. I used to program from dinner till about 3 am every day, because at night no one could interrupt me. Then I’d sleep till about 11 am, and come in and work until dinner on what I called “business stuff.” I never thought of it in these terms, but <strong>in effect I had two workdays each day</strong>, one on the manager’s schedule and one on the maker’s.</p>
</blockquote>

<p><strong><a href="http://www.joelonsoftware.com/articles/fog0000000022.html">Human Task Switches Considered Harmful</a></strong></p>

<blockquote>
  <p>Programming is the kind of task where you have to keep a lot of things in your head at once. The more things you remember at once, the more productive you are at programming. A programmer coding at full throttle is keeping zillions of things in their head at once: everything from names of variables, data structures, important APIs, the names of utility functions that they wrote and call a lot, even the name of the subdirectory where they store their source code. <strong>If you send that programmer to Crete for a three week vacation, they will forget it all.</strong> The human brain seems to move it out of short-term RAM and swaps it out onto a backup tape where it takes forever to retrieve.</p>

  <p>In fact, the real lesson from all this is that you should <strong>never let people work on more than one thing at once</strong>. Make sure they know what it is.</p>
</blockquote>

<p>It’s not the excuse but the reason that I prefer working in my apartment (or Starbucks) rather than lab, where all kinds of weird situations would come up at any time… Anyway, the takeaway points are: I should pay more attention on my schedule, both for the long term and short term, to maximize the productivity; concentrate on one project (language, research topic) at a given period; extract the most out of it, celebrate, and then dive into another work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading note of SICP (5)]]></title>
    <link href="http://creasyw.github.io/blog/2014/05/15/reading-note-of-sicp-5/"/>
    <updated>2014-05-15T00:55:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2014/05/15/reading-note-of-sicp-5</id>
    <content type="html"><![CDATA[<ul>
  <li>The ability to visualize the consequences of the actions under consideration is crucial to becoming an expert programmer.</li>
  <li>Procedures that manipulate procedures, including accept them as arguments or return them as values, are called <em>higher-order procedures</em>. (The <em>sigma</em> summation and the derivative operation are all good/simple examples for the latter case.) This is one of the basic characteristics of <em>factional programming languages</em>.</li>
  <li>The significance of higher-order procedures is that they enable us to represent these abstractions explicitly as elements in our programming language, so that they can be handled just like other computational elements……As programmers, we should be alert to opportunities to identify the underlying abstractions in our programs and to build upon them and generalize them to create more powerful abstractions……It poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.</li>
  <li>As with compound procedures, the main issue is to be addressed is that of abstraction as a technique for coping with complexity, while the data abstraction enables us to erect suitable <em>abstraction barriers</em> between different parts of a program.</li>
  <li>In general, the underlying idea of data abstraction is to identify for each type of data object a basic set of operations in terms of which all manipulations of data objects of that type will be expressed, and then to use only those operations in manipulating the data.</li>
  <li>The approach of <em>stratified design</em> is the notion that a complex system should be structured as a sequence of levels that are described using a sequence of languages. Each level is constructed by combining parts that are regarded as primitive at that level, and the parts constructed at each level are used as primitives at the next level. The language used at each level of a stratified design has primitives, means of combinations, and means of abstraction appropriate to that level of detail.</li>
  <li>(Thoughts) I thought local binding with “let/let*/letrec” are similar to what I did in the imperative programming in a sense that I was telling the program what to do. However, this is not the essence. The local binding is the part of paper which contains the “where…” after a complicated formula. It is the way for data abstract.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plotting in Latex]]></title>
    <link href="http://creasyw.github.io/blog/2014/02/27/plotting-in-latex/"/>
    <updated>2014-02-27T13:14:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2014/02/27/plotting-in-latex</id>
    <content type="html"><![CDATA[<p>I just hope that I could find this feature earlier. <a href="http://www.texample.net/tikz/">TikZ</a></p>

<p>Some nice examples to start with:</p>

<ul>
  <li><a href="http://commons.wikimedia.org/wiki/File:Neighbourhood_definition2.svg">Neighbourhood definition</a></li>
  <li><a href="http://www.texample.net/tikz/examples/highlighting-matrix/">Highlighting elements in matrices</a></li>
  <li><a href="http://www.texample.net/tikz/examples/more-tikz-timing-examples/">Signal timing</a></li>
  <li><a href="http://www.texample.net/tikz/examples/bode-plot/">Body plot of functions</a></li>
  <li><a href="http://www.texample.net/tikz/examples/database-decimation-process/">Database decimation process</a></li>
  <li><a href="http://www.texample.net/tikz/examples/labs-schema/">Flowchart with block highlights</a></li>
  <li><a href="http://www.texample.net/tikz/examples/set-operations-illustrated-with-venn-diagrams/">Set operations</a></li>
  <li><a href="http://www.texample.net/tikz/examples/credit-rationing/">Cross-comparsion among curves</a></li>
  <li><a href="http://www.texample.net/tikz/examples/phasor-diagram/">Phasor diagram (more fancy)</a></li>
  <li><a href="http://www.texample.net/tikz/examples/difference-quotient/">Difference quotient (partial zoom-in)</a></li>
  <li><a href="http://www.texample.net/tikz/examples/nested-grids-in-swan-and-wam-coupling/">Nested Grids</a></li>
  <li><a href="http://www.texample.net/tikz/examples/fir-filter/">Digital Signal Processing Library</a></li>
</ul>

<p>More examples can be found in <a href="http://www.texample.net/tikz/examples/">the official site</a>, <a href="http://graphtheoryinlatex.wordpress.com/">Graph Theory in LaTeX 2</a>, <a href="http://elishapeterson.wikidot.com/tikz:diagrams">Drawing Trace Diagrams</a>, and <a href="http://www.statistiker-wg.de/pgf/tutorials.htm">TikZ tutorials</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better look for git log]]></title>
    <link href="http://creasyw.github.io/blog/2014/02/24/better-look-for-git-log/"/>
    <updated>2014-02-24T13:30:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2014/02/24/better-look-for-git-log</id>
    <content type="html"><![CDATA[<p>The first time that I read it is from coolshell.cn, and then today from <a href="http://www.reddit.com/r/programming/comments/1yqiq8/git_log_is_so_2005/">reddit</a>. Just put here as a backup.</p>

<p><code>sh
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"
</code></p>

<p>The afterwards effect is something like:</p>

<p><img class="center" src="/img/post/git_lg.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Progression Path]]></title>
    <link href="http://creasyw.github.io/blog/2014/01/02/emacs-progression-path/"/>
    <updated>2014-01-02T16:37:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2014/01/02/emacs-progression-path</id>
    <content type="html"><![CDATA[<p>I was hoping to find something like <a href="http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru">Python Progression Path</a> or sort of “best practice” for Emacs, because the difference between Vim and Emacs was much larger than I thought. But what I found were either teaching about basic operations such as saving and quiting the editor for people who had access to comupter for the 1st time, or talking about tricks of using Emacs Lisp for the high-end hard-core players… It seemed like I was stuck in the middle, and would stay there for a very long time…</p>

<p>I will sort the contents here as incremental records simulating my Emacs learning process, as well as keeping track of nontrivial materials and thoughts.</p>

<h3 id="references">References:</h3>

<ul>
  <li><a href="http://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/">Tow</a> <a href="http://sachachua.com/p/26006">pics</a> served as the very beginning of entering the world of Emacs.</li>
  <li>Cheat Sheet (<a href="http://refcards.com/docs/gildeas/gnu-emacs/emacs-refcard-a4.pdf">compact version</a>, and <a href="http://cs.iupui.edu/~kweimer/EmacsCheatSheet.pdf">a more user friendly verion</a>).</li>
  <li>C-h t. Tutorial of Emacs within the editor. It should be the first doc to read.</li>
  <li>My previous <a href="http://wqiong.com/blog/2013/07/01/setup-emacs-in-mac-os/">post</a> to setup Emacs in Mac OS.</li>
  <li>Steve Yegge’s suggestion for <a href="https://sites.google.com/site/steveyegge2/effective-emacs">improving productivity with Emacs</a></li>
  <li><a href="http://batsov.com/prelude/">Prelude</a> – very easy to setup, and add/disable modules.</li>
  <li><a href="https://github.com/xiaohanyu/oh-my-emacs">Oh-my-emacs</a> is another option to start with, but I met quite a few incompatible issues for the mac os. <a href="https://github.com/eschulte/emacs24-starter-kit">Emacs24 Starter Kit</a> is also well-known but relatively inactive recently.</li>
  <li>GNU <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html">Emacs Manual</a> and <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/">Emacs LISP Manual</a></li>
  <li><a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">Guidelines</a> for package management in Emacs.</li>
  <li><a href="http://www.emacswiki.org/emacs/">Emacs Wiki</a></li>
  <li><a href="http://www.masteringemacs.org/">Mastering Emacs</a></li>
  <li><a href="http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">From Vim to Emacs+Evil chaotic migration guide</a></li>
</ul>

<p>–Well, it is really a road that will never end…</p>

<h3 id="packages">Packages:</h3>

<ul>
  <li><a href="https://github.com/magit/magit">Magit</a>. “Magit is the most popular interface to git. If you are new to git and do not need support for other vcs this is likely the package you should try first” – quoted from <a href="http://www.emacswiki.org/emacs/Git">EmacsWiki</a>. The detail explanation can be found from <a href="http://www.masteringemacs.org/articles/2013/12/06/introduction-magit-emacs-mode-git/">Mastering Emacs</a>.</li>
  <li><a href="http://company-mode.github.io/">Company</a> for auto-completion.</li>
</ul>

<h3 id="random-thoughts">Random Thoughts</h3>
<ul>
  <li>One of the most fundamental change from Vim to Emacs is that Vim is the most powerful editor in this planet while Emacs is kind of <a href="http://c2.com/cgi/wiki?EmacsAsOperatingSystem">“operating system” with a lousy editor</a>. It might be a rant to the right place, but anyway, the other side of the story is that emacs can be regarded as an OS which means that it might be much more powerful when the configuration is right. I should be able to do things that are used to complete via the combination of vim, shell, REPL, and compiler, and I SHOULD NOT launch and exit it very often as what I am doing with vim.</li>
  <li>Everything looks a little bit more decent within the emacs,
including the shell.</li>
</ul>

<h3 id="useful-key-combinings">Useful Key Combinings:</h3>

<p>Kill a line:
C-a C-k (move the cursor to the begining of the line, thenkill from the cursor to the end of the line)</p>

<p>Kill 2 lines: C-a C-u 2 C-k</p>

<p>Kill a specific region
C-&lt;SPC&gt; C-w (move around to highlight region, then kill contents within highlight region)</p>

<p>Yank the killed contents C-y</p>

<p>Retrieve yanking history
M-y (right after the 1st yanking. – this is intersting)</p>

<p>The difference between “killing” and “deleting” is that “killed” text
can be reinserted (at any position), whereas “deleted” things cannot
be reinserted in this way (you can, however, undo a deletion–see below).
Reinsertion of killed text is called “yanking”.  Generally, the
commands that can remove a lot of text kill the text (they are set up so
that you can yank the text), while the commands that remove just one
character, or only remove blank lines and spaces, do deletion (so you
cannot yank that text).  &lt;DEL&gt; and C-d do deletion in the simplest
case, with no argument.  When given an argument, they kill instead.
– This is valid for both vim and emacs.</p>

<p>Multiple windows:
- C-x 0  delete this window
- C-x 1  delete all other windows
- C-x 2  vertically split window
- C-x 3  split window side by side</p>

<p>Scoll down the page
- C-v (page down)
- C-u 8 C-v (scoll down 8 lines)
- C-l (move the current line to the middle of the window)
- C-u 0 C-l (move the current line to the head of the window)</p>

<p>Getting help
- C-h c &lt;Command sequence&gt;   (a very brief description of the command.)
- C-h k &lt;Command sequence&gt;   (displays the documentation of the function, as well as its name)</p>

<p>Auto-completion
- M-/
- <a href="http://company-mode.github.io/">Company</a> is good complementory plug-in</p>

<p>Shell History (also Useful for Haskell REPL)
- M-p (or) C-&lt;UP&gt;: Fetch the next earlier old shell command.
- M-n (or) C-&lt;DOWN&gt;: Fetch the next later old shell command.
- M-r: Begin an incremental regexp search of old shell commands.
- C-c C-x: Fetch the next subsequent command from the history.
- C-c . : Fetch one argument from an old shell command.
- C-c C-l: Display the buffer’s history of shell commands in another window (comint-dynamic-list-input-ring).</p>

<h3 id="missing-features">Missing Features:</h3>

<p>This is a list for what I should expand the functionalities of my Emacs.</p>

<ul>
  <li>Highlight symbol at the point. There is <a href="http://www.emacswiki.org/emacs/HighlightSymbol">a package</a> for this purpose, but currently it does not work well within Prelude.</li>
  <li>Interactive input for M-x.</li>
</ul>
]]></content>
  </entry>
  
</feed>
