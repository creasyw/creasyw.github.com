<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Qiong Wu]]></title>
  <link href="http://creasyw.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2014-08-14T00:05:28-05:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading note of SICP (5)]]></title>
    <link href="http://creasyw.github.io/blog/2014/05/15/reading-note-of-sicp-5/"/>
    <updated>2014-05-15T00:55:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2014/05/15/reading-note-of-sicp-5</id>
    <content type="html"><![CDATA[<ul>
  <li>The ability to visualize the consequences of the actions under consideration is crucial to becoming an expert programmer.</li>
  <li>Procedures that manipulate procedures, including accept them as arguments or return them as values, are called <em>higher-order procedures</em>. (The <em>sigma</em> summation and the derivative operation are all good/simple examples for the latter case.) This is one of the basic characteristics of <em>factional programming languages</em>.</li>
  <li>The significance of higher-order procedures is that they enable us to represent these abstractions explicitly as elements in our programming language, so that they can be handled just like other computational elements……As programmers, we should be alert to opportunities to identify the underlying abstractions in our programs and to build upon them and generalize them to create more powerful abstractions……It poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.</li>
  <li>As with compound procedures, the main issue is to be addressed is that of abstraction as a technique for coping with complexity, while the data abstraction enables us to erect suitable <em>abstraction barriers</em> between different parts of a program.</li>
  <li>In general, the underlying idea of data abstraction is to identify for each type of data object a basic set of operations in terms of which all manipulations of data objects of that type will be expressed, and then to use only those operations in manipulating the data.</li>
  <li>The approach of <em>stratified design</em> is the notion that a complex system should be structured as a sequence of levels that are described using a sequence of languages. Each level is constructed by combining parts that are regarded as primitive at that level, and the parts constructed at each level are used as primitives at the next level. The language used at each level of a stratified design has primitives, means of combinations, and means of abstraction appropriate to that level of detail.</li>
  <li>(Thoughts) I thought local binding with “let/let*/letrec” are similar to what I did in the imperative programming in a sense that I was telling the program what to do. However, this is not the essence. The local binding is the part of paper which contains the “where…” after a complicated formula. It is the way for data abstract.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plotting in Latex]]></title>
    <link href="http://creasyw.github.io/blog/2014/02/27/plotting-in-latex/"/>
    <updated>2014-02-27T13:14:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2014/02/27/plotting-in-latex</id>
    <content type="html"><![CDATA[<p>I just hope that I could find this feature earlier. <a href="http://www.texample.net/tikz/">TikZ</a></p>

<p>Some nice examples to start with:</p>

<ul>
  <li><a href="http://commons.wikimedia.org/wiki/File:Neighbourhood_definition2.svg">Neighbourhood definition</a></li>
  <li><a href="http://www.texample.net/tikz/examples/highlighting-matrix/">Highlighting elements in matrices</a></li>
  <li><a href="http://www.texample.net/tikz/examples/more-tikz-timing-examples/">Signal timing</a></li>
  <li><a href="http://www.texample.net/tikz/examples/bode-plot/">Body plot of functions</a></li>
  <li><a href="http://www.texample.net/tikz/examples/database-decimation-process/">Database decimation process</a></li>
  <li><a href="http://www.texample.net/tikz/examples/labs-schema/">Flowchart with block highlights</a></li>
  <li><a href="http://www.texample.net/tikz/examples/set-operations-illustrated-with-venn-diagrams/">Set operations</a></li>
  <li><a href="http://www.texample.net/tikz/examples/credit-rationing/">Cross-comparsion among curves</a></li>
  <li><a href="http://www.texample.net/tikz/examples/phasor-diagram/">Phasor diagram (more fancy)</a></li>
  <li><a href="http://www.texample.net/tikz/examples/difference-quotient/">Difference quotient (partial zoom-in)</a></li>
  <li><a href="http://www.texample.net/tikz/examples/nested-grids-in-swan-and-wam-coupling/">Nested Grids</a></li>
  <li><a href="http://www.texample.net/tikz/examples/fir-filter/">Digital Signal Processing Library</a></li>
</ul>

<p>More examples can be found in <a href="http://www.texample.net/tikz/examples/">the official site</a>, <a href="http://graphtheoryinlatex.wordpress.com/">Graph Theory in LaTeX 2</a>, <a href="http://elishapeterson.wikidot.com/tikz:diagrams">Drawing Trace Diagrams</a>, and <a href="http://www.statistiker-wg.de/pgf/tutorials.htm">TikZ tutorials</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better look for "git log"]]></title>
    <link href="http://creasyw.github.io/blog/2014/02/24/better-look-for-git-log/"/>
    <updated>2014-02-24T13:30:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2014/02/24/better-look-for-git-log</id>
    <content type="html"><![CDATA[<p>The first time that I read it is from coolshell.cn, and then today from <a href="http://www.reddit.com/r/programming/comments/1yqiq8/git_log_is_so_2005/">reddit</a>. Just put here as a backup.</p>

<p><code>sh
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"
</code></p>

<p>The afterwards effect is something like:</p>

<p><img class="center" src="/img/post/git_lg.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Progression Path]]></title>
    <link href="http://creasyw.github.io/blog/2014/01/02/emacs-progression-path/"/>
    <updated>2014-01-02T16:37:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2014/01/02/emacs-progression-path</id>
    <content type="html"><![CDATA[<p>I was hoping to find something like <a href="http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru">Python Progression Path</a> or sort of “best practice” for Emacs, because the difference between Vim and Emacs was much larger than I thought. But what I found were either teaching about basic operations such as saving and quiting the editor for people who had access to comupter for the 1st time, or talking about tricks of using Emacs Lisp for the high-end hard-core players… It seemed like I was stuck in the middle, and would stay there for a very long time…</p>

<p>I will sort the contents here as incremental records simulating my Emacs learning process, as well as keeping track of nontrivial materials and thoughts.</p>

<h3 id="resources">Resources:</h3>

<ul>
  <li><a href="http://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/">Tow</a> <a href="http://sachachua.com/p/26006">pics</a> served as the very beginning of entering the world of Emacs.</li>
  <li>Cheat Sheet (<a href="http://refcards.com/docs/gildeas/gnu-emacs/emacs-refcard-a4.pdf">compact version</a>, and <a href="http://cs.iupui.edu/~kweimer/EmacsCheatSheet.pdf">a more user friendly verion</a>).</li>
  <li>C-h t. Tutorial of Emacs within the editor. It should be the first doc to read.</li>
  <li>My previous <a href="http://wqiong.com/blog/2013/07/01/setup-emacs-in-mac-os/">post</a> to setup Emacs in Mac OS.</li>
  <li>Steve Yegge’s suggestion for <a href="https://sites.google.com/site/steveyegge2/effective-emacs">improving productivity with Emacs</a></li>
  <li><a href="http://batsov.com/prelude/">Prelude</a> – very easy to setup, and add/disable modules.</li>
  <li><a href="https://github.com/xiaohanyu/oh-my-emacs">Oh-my-emacs</a> is another option to start with, but I met quite a few incompatible issues for the mac os. <a href="https://github.com/eschulte/emacs24-starter-kit">Emacs24 Starter Kit</a> is also well-known but relatively inactive recently.</li>
  <li>GNU <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html">Emacs Manual</a> and <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/">Emacs LISP Manual</a></li>
  <li><a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">Guidelines</a> for package management in Emacs.</li>
  <li><a href="http://www.emacswiki.org/emacs/">Emacs Wiki</a></li>
  <li><a href="http://www.masteringemacs.org/">Mastering Emacs</a></li>
</ul>

<p>–Well, it is really a road that will never end…</p>

<h3 id="packages">Packages:</h3>

<ul>
  <li><a href="https://github.com/magit/magit">Magit</a>. “Magit is the most popular interface to git. If you are new to git and do not need support for other vcs this is likely the package you should try first” – quoted from <a href="http://www.emacswiki.org/emacs/Git">EmacsWiki</a>. The detail explanation can be found from <a href="http://www.masteringemacs.org/articles/2013/12/06/introduction-magit-emacs-mode-git/">Mastering Emacs</a>.</li>
  <li><a href="http://company-mode.github.io/">Company</a> for auto-completion.</li>
</ul>

<h3 id="random-thoughts">Random Thoughts</h3>
<ul>
  <li>One of the most fundamental change from Vim to Emacs is that Vim is the most powerful editor in this planet while Emacs is kind of <a href="http://c2.com/cgi/wiki?EmacsAsOperatingSystem">“operating system” with a lousy editor</a>. It might be a rant to the right place, but anyway, the other side of the story is that emacs can be regarded as an OS which means that it might be much more powerful when the configuration is right. I should be able to do things that are used to complete via the combination of vim, shell, REPL, and compiler, and I SHOULD NOT launch and exit it very often as what I am doing with vim.</li>
  <li>Everything looks a little bit more decent within the emacs,
including the shell.</li>
</ul>

<h3 id="useful-key-combinings">Useful Key Combinings:</h3>

<p>Kill a line:
C-a C-k (move the cursor to the begining of the line, thenkill from the cursor to the end of the line)</p>

<p>Kill 2 lines: C-a C-u 2 C-k</p>

<p>Kill a specific region
C-&lt;SPC&gt; C-w (move around to highlight region, then kill contents within highlight region)</p>

<p>Yank the killed contents C-y</p>

<p>Retrieve yanking history
M-y (right after the 1st yanking. – this is intersting)</p>

<p>The difference between “killing” and “deleting” is that “killed” text
can be reinserted (at any position), whereas “deleted” things cannot
be reinserted in this way (you can, however, undo a deletion–see below).
Reinsertion of killed text is called “yanking”.  Generally, the
commands that can remove a lot of text kill the text (they are set up so
that you can yank the text), while the commands that remove just one
character, or only remove blank lines and spaces, do deletion (so you
cannot yank that text).  &lt;DEL&gt; and C-d do deletion in the simplest
case, with no argument.  When given an argument, they kill instead.
– This is valid for both vim and emacs.</p>

<p>Multiple windows:
- C-x 0  delete this window
- C-x 1  delete all other windows
- C-x 2  vertically split window
- C-x 3  split window side by side</p>

<p>Scoll down the page
- C-v (page down)
- C-u 8 C-v (scoll down 8 lines)
- C-l (move the current line to the middle of the window)
- C-u 0 C-l (move the current line to the head of the window)</p>

<p>Getting help
- C-h c &lt;Command sequence&gt;   (a very brief description of the command.)
- C-h k &lt;Command sequence&gt;   (displays the documentation of the function, as well as its name)</p>

<p>Auto-completion
- M-/
- <a href="http://company-mode.github.io/">Company</a> is good complementory plug-in</p>

<p>Shell History (also Useful for Haskell REPL)
- M-p (or) C-&lt;UP&gt;: Fetch the next earlier old shell command.
- M-n (or) C-&lt;DOWN&gt;: Fetch the next later old shell command.
- M-r: Begin an incremental regexp search of old shell commands.
- C-c C-x: Fetch the next subsequent command from the history.
- C-c . : Fetch one argument from an old shell command.
- C-c C-l: Display the buffer’s history of shell commands in another window (comint-dynamic-list-input-ring).</p>

<h3 id="missing-features">Missing Features:</h3>

<p>This is a list for what I should expand the functionalities of my Emacs.</p>

<ul>
  <li>Highlight symbol at the point. There is <a href="http://www.emacswiki.org/emacs/HighlightSymbol">a package</a> for this purpose, but currently it does not work well within Prelude.</li>
  <li>Interactive input for M-x.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All-pairs shortest path]]></title>
    <link href="http://creasyw.github.io/blog/2013/09/30/johnsons-algorithm/"/>
    <updated>2013-09-30T23:49:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2013/09/30/johnsons-algorithm</id>
    <content type="html"><![CDATA[<p>The question comes from the online course <em>Algorithm Design and Analysis (Part II)</em> in coursera. It is an <a href="http://en.wikipedia.org/wiki/Shortest_path_problem#All-pairs_shortest_paths">all-pairs shortest path problem</a>. As mentioned in the wikipedia, a more straightforward solution with Floyd–Warshall algorithm takes \(O(N^3)\) complexity, and the more computational efficient approach is to use a combination of Dijkstra’s algorithm, Bellman-Ford algorithm, and Johnson’s algorithm, which chould decrease the complexity to \(O(N^2logN)\). I implement the latter one for more interesting and challenging. There are several obstacles make the implementation a little bit trickier than I thought.</p>

<p>I have tried two or three different versions of Dijkstra’s algorithm while solving other math puzzles, and this time I use the built-in heapq function in Python. Keeping the “about-to explore” nodes in order and extracting the smallest/largest cost one in every iteration are the essense of this algorithm. But the cost to every node has to be updated when a node moves from “about-to explore” to “fully explored” category. At first, I just remove the original value and push the updated one into the heap. Because the heapq has no updated or remove methods, I can only use the remove mehtod of the list. This works fine for small amount of nodes (200) but the heap cannot keep right struture when the data becomes just a little bigger (500). Then I have to <em>heapify</em> it every time I update a “about-to explore” node.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Dijkstra’s Algorithm</span><a href='https://github.com/creasyw/learning/blob/master/courses/algo_analysis_II/hw4/dijkstras.py'>link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">dijkstras</span>(graph, start):
    <span class="comment"># keep a record of the distance of the nodes from the start vertex</span>
    distance = defaultdict()
    <span class="comment"># keep track of the candidates for the next move</span>
    index = defaultdict()
    <span class="comment"># store the cost and node into heap using cost as the key</span>
    heap = []
    heapq.heapify(heap)
    <span class="comment">#will be used to trace the path of the sjortest distance to each node</span>
    distance[start] = <span class="integer">0</span>
    <span class="keyword">if</span> start <span class="keyword">in</span> graph <span class="keyword">and</span> <span class="predefined">type</span>(graph[start])==<span class="predefined">dict</span>:
        <span class="keyword">for</span> (node, cost) <span class="keyword">in</span> graph[start].items():
            heap_update(heap, index, node, cost)
    <span class="keyword">else</span>:
        <span class="keyword">return</span> distance
    <span class="comment">#initially all nodes are yet to be explored</span>
    <span class="keyword">while</span> <span class="predefined">len</span>(index) &amp;gt; <span class="integer">0</span>:
        <span class="comment"># need to extract the node with the minimum path</span>
        node, cost = heap_pop(heap, index)
        <span class="comment"># store the node into known graph</span>
        distance[node] = cost
        <span class="comment"># update the knowledge according to existing node</span>
        <span class="keyword">if</span> node <span class="keyword">in</span> graph <span class="keyword">and</span> <span class="predefined">type</span>(graph[node])==<span class="predefined">dict</span>:
            <span class="keyword">for</span> (node, localcost) <span class="keyword">in</span> graph[node].items():
                <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> distance:
                    heap_update(heap, index, node, localcost+cost)
    <span class="keyword">return</span> distance
</pre></div>
</div>
 </figure></notextile></div></p>

<p>The Bellman-Ford algorithm is more expensive compared with Dijkstra’s algirhtm if the graph is densily connected, but it deals with negative edge cost. This is also the one that helps me fully appreciate the dynamic programming.The implementation is intuitive and straightforward. For every vertex, the brutal force search performs to find the current optimal solution based on the previous knowledge. The optimization for space complexity is to only store the most recent result–keep an 2*N array and use a pointer filp-flop in every iteration is more effecient than keeping two 1*N array, discarding the older one and reclaiming a new one in every iteration. Aother optimization I make is to store the “about-to explore” nodes in a bucket, just as what Dijkstra’s does, which eliminates plenty of unnecessary calculation. But its tricky aspect is that because this algorithm is computing “distributed”, different from the “centralized” spanning of Dijkstra’s, if several “exploring” vertices point to a same “about-to explore” vertex, only the optimal cost should be kept.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Bellman-Ford Algorithm</span><a href='https://github.com/creasyw/learning/blob/master/courses/algo_analysis_II/hw4/bellman_ford.py'>link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">bellman_ford</span> (arr, start, size):
    <span class="error">“</span><span class="error">”</span><span class="error">”</span> The <span class="predefined">input</span> arr stores <span class="predefined">all</span> info of the graph <span class="keyword">in</span> a dictionary.
        The basic element <span class="keyword">in</span> the arr are three-columns data <span class="error">–</span> 
        [start_point, end_point, cost]<span class="error">”</span><span class="error">”</span><span class="error">”</span>
    count = <span class="integer">1</span>
    data = np.zeros((<span class="integer">2</span>, size+<span class="integer">1</span>))
    <span class="comment"># initialization</span>
    data.fill(<span class="predefined">float</span>(<span class="error">“</span>inf<span class="error">”</span>))
    data[<span class="integer">0</span>, start] = <span class="integer">0</span>
    bucket = {}
    <span class="keyword">for</span> i <span class="keyword">in</span> arr[start]:
        bucket[i] = {start:arr[start][i]}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>, size):
    <span class="comment"># use set() to make sure start points in the next round are unique</span>
    candidate = <span class="predefined">set</span>()
    previous = count ^ <span class="integer">1</span>
    data[count] = data[previous]
    <span class="keyword">for</span> v <span class="keyword">in</span> bucket:
        data[count, v] = <span class="predefined">min</span>(data[previous, v], \
        data[previous, bucket[v].keys()[<span class="integer">0</span>]] \
        +bucket[v].values()[<span class="integer">0</span>])
        candidate.add(v)
    <span class="comment"># stop early if there is no place to span</span>
    <span class="keyword">if</span> (data[count]==data[previous]).all():
        <span class="keyword">break</span>
    <span class="comment"># update the bucket</span>
    bucket = {}
    <span class="keyword">for</span> j <span class="keyword">in</span> candidate:
        <span class="keyword">for</span> k <span class="keyword">in</span> arr[j]:
            <span class="keyword">if</span> (k <span class="keyword">in</span> bucket <span class="keyword">and</span> data[count,j]+arr[j][k] &amp;lt; \
              data[count, bucket[k].keys()[<span class="integer">0</span>]] + \
              bucket[k].values()[<span class="integer">0</span>]) <span class="keyword">or</span> k <span class="keyword">not</span> <span class="keyword">in</span> bucket:
                bucket[k] = {}
                bucket[k][j] = arr[j][k]
    <span class="keyword">if</span> <span class="keyword">not</span> bucket:
        <span class="keyword">break</span>
    count = previous

<span class="comment"># check cycle with negative sum</span>
previous = count ^ <span class="integer">1</span>
data[count] = data[previous]
<span class="keyword">for</span> v <span class="keyword">in</span> bucket:
    data[count, v] = <span class="predefined">min</span>(data[previous,v], \
        data[previous, bucket[v].keys()[<span class="integer">0</span>]]+bucket[v].values()[<span class="integer">0</span>])
<span class="keyword">if</span> (data[count]== data[previous]).all():
    <span class="keyword">return</span> data[count]
<span class="keyword">else</span>:
    <span class="keyword">return</span> <span class="predefined">float</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">inf</span><span class="delimiter">&quot;</span></span>) </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>Finally, the two algorithms above are connected by the Johnson’s algorithm. Dijkstra’s algorithm cannot deal with negative edge costs, but much more fast than Bellman-Ford especially in the case of “all-pairs”. Furthermore, the negative costs cannot be got rid of by adding uniformly for every edge. Johnson’s algorithm neatly solves it by adding pseudo-node to find weights of vertices and changing values of edges concerning their connected vertices. There is no hidden obstacle in the implementation. Only the special care should be taken for manipulating the nodes. It reminds me coding in C…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Johnson’s Algorithm</span><a href='https://github.com/creasyw/learning/blob/master/courses/algo_analysis_II/hw4/johnsons.py'>link</a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">def</span> <span class="function">johonsons</span>(data, vertex):
    d1 = data.copy()
    <span class="comment"># make psedu node pointing to all other nodes with zero cost</span>
    plus1 = vertex+<span class="integer">1</span>
    d1[plus1] = {}
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>, plus1):
        d1[plus1][i] = <span class="integer">0</span>
    <span class="comment"># calculate the reweight vector</span>
    reweight = bellman_ford(d1, plus1, plus1)
    <span class="comment"># reweight all cost to make it nonnegative</span>
    <span class="keyword">if</span> <span class="predefined">type</span>(reweight) == <span class="predefined">float</span>:
        <span class="comment"># stop if there is any negative cycle in the graph</span>
        <span class="keyword">return</span> <span class="predefined-constant">None</span>
    <span class="keyword">else</span>:
        <span class="keyword">for</span> i <span class="keyword">in</span> data:
            <span class="keyword">for</span> k <span class="keyword">in</span> data[i]:
                data[i][k] = data[i][k]+reweight[i]-reweight[k]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span> [<span class="predefined">min</span>(reconvert(reweight,vertex,dijkstras(data,i),i))\
        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>,vertex+<span class="integer">1</span>)] </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>The overall algorithm solves the question and runs kind of standard. Still, I do not satisfy with the update procedure of heap. I will write a new version of this data structure in the near future and see if it can provide significant boost for the performance.</p>

<p>p.s. The vistualization of code block is optimized from the original Octopress style to Github-style based on the <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">tutorial</a>.<br />
p.p.s. The inline latex-style formula comes with Kramdown, MathJax and <a href="http://yoyzhou.github.io/blog/2012/08/05/add-latex-support-for-octopress/">this tutorial</a>. Besides, there is <a href="http://brianbuccola.github.io/blog/2012-11-28-latex-math-in-octopress.html">another minor bug to deal with</a>.</p>
]]></content>
  </entry>
  
</feed>
