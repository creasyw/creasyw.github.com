<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Qiong Wu]]></title>
  <link href="http://creasyw.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2013-09-06T15:54:18-05:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memory Management in Obj C]]></title>
    <link href="http://creasyw.github.io/blog/2011/12/19/memory-management-in-obj-c/"/>
    <updated>2011-12-19T00:00:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2011/12/19/memory-management-in-obj-c</id>
    <content type="html"><![CDATA[<div class='post'>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <br />I just complete my 2nd iOS homework, which took me cumulative 40 hours. The part that impressed (or... baffled...) me most is about dealing with memory management. In one scree, I opened the Xcode IDE, and in another screen, I just cross-referenced StackOverflow, Developer Library, and Google searching over and over again. There was no one-stop solution for all of the problems I met. But it only made me feel more enjoyable when I finally found the path to solution:) In case that I might forget the key points all I have collected, I record them here with references.<br /><br />1. <a href="http://stackoverflow.com/questions/3789684/objective-c-checking-if-object-is-undefined-or-nil">Declaration of object</a>. <br /><code>MyObject* myObject;</code><br /><b style="color: red;">WRONG! </b>This means myObject points to a chunk of garbage memory, which would not correctly work at all. Basically, there are two ways to do this correctly:<br /><code>MyObject* myObject=nil;<br />MyObject* myObject=[[MyObject alloc] init];&nbsp;</code><br />The former one makes myObject to point to nothing. Now it at least consistently does nothing, or I could use this pointer points to some useful object later on. But this will also lends to another issue about the life-cycle of a object which I will talk about in detail later. The latter one is to allocate a MyObject object in the memory, initialize it, and then make myObject point to the chunk of memory correctly allocated and initialized. Now, if the MyObject has the interface<br /><code>@interface MyObject:NSObject{<br />&nbsp;&nbsp;&nbsp; NSString* string;<br />}<br /><br />@end<br /><br />@implementation MyObject<br />-(id) init {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(self=[super init]){<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...do something ...<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self;<br />}<br /></code><br />after [super init] is successfully performed, Objective-C guarantees that the ivar string is set to nil, i.e. string points to nothing. But it is not that an NSString is allocated or initialized.<br /><br />2. Basic rules about ownership&nbsp; and memory management:<br /><ul><li>Any object returned by <i><b>alloc</b></i>, <i><b>copy</b></i>, <i><b>copyWithZone</b></i>, or <i><b>new</b></i> has a retain count of 1.</li><li><i><b>retain</b></i> increases the receiving object's retain count.</li><li><i><b>release</b></i> decreases the receiving object's retain count.</li><li><i><b>autorelease</b></i> tells the current autorelease pool to send the receiving object the release message “later”.</li><li>Any factory method that doesn't have “new” or “copy” in the name (e.g., stringWithString:) returns an object that it has autoreleased on your behalf.</li><li>Conversely, if you are not the creator of an object and have not expressed an ownership interest, you must not release it. </li></ul>Or, digested a bit:<br /><ul><li>Any method whose name contains copy, alloc, retain, or new returns an object that you own.</li><li>Any method that doesn't, returns an object that you don't own.</li><li>To own an object, retain it.</li></ul><br />Reference: <a href="http://stackoverflow.com/questions/318666/object-ownership-in-stringwithstring-and-initwithstring-in-nsstring">StackOverflow,</a> <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html">Developer Library</a>. <a href="http://www.otierney.net/objective-c.html#retain">An example about <b><i>retain</i></b> and <b><i>release</i></b></a>, and <a href="http://stackoverflow.com/questions/3262575/alloc-init-with-synthesized-property-does-it-cause-retain-count-to-increase">another deeper discussion</a>. <br /><br />3. <i><b>copy</b></i> versus <i><b>retain</b></i><br /><br />There are lots of discussions about the subtle differences between these two operations, though they both intend to take the ownership from the acquired objects. "<a href="http://vgable.com/blog/2008/11/14/prefer-copy-over-retain/">(Almost) every time you use retain in Objective-C/Cocoa, you really should be using copy. Using retain can introduce some subtle bugs, and copy is faster then you think…</a>" The problem with using retain to “take ownership” of an object is that someone else has a pointer to the same object, and if they change it, you will be affected.<br /><br />There are some other discussions concerning the same kind of problem in <a href="http://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain/388002#388002">StackOverflow</a> and <a href="http://robnapier.net/blog/implementing-nscopying-439">post in a blog</a>. Besides, I also made to rookie mistakes that took me quite a while to find out and correct.<br /><br />4. <a href="http://stackoverflow.com/questions/3488446/is-a-synthesized-property-already-alloc-init-ed">Has a @synthesize property already init &amp; alloc-ed?</a><br /><br />The answer is NO. It needs to populate the property manually. The exception is if you have an IBOutlet property that you've connected in a nib file; that will get populated automatically when the nib is loaded.<br /><br />For view controllers, the vast majority of properties are IBOutlets and properties that describe what the view will show, and the latter case is usually set by the object that creates the view controller. That will usually be the case for a view controller that shows a detail view for some object.<br /><br />If you do have properties that are completely local to the view controller, a common pattern is to write your own getter and setter (rather than using @synthesize) and create the object in the getter if it doesn't exist. This lazy-loading behavior means you can easily free up resources in low-memory conditions, and that you only pay the cost of loading an object when you need it.<br /><code>// simple lazy-loading getter<br />- (MyPropertyClass*) propertyName {<br />&nbsp;&nbsp;&nbsp; if(propertyIvarName == nil) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyIvarName = [[MyPropertyClass alloc] init];<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ......&nbsp; // ... other setup here<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; return propertyIvarName;<br />}</code><br /><br />5. Pitfall about the use of getter/setter:<br /><code>@interface MyObject:NSObject{<br />&nbsp;&nbsp;&nbsp; NSString *aString;<br />}<br />@property (nonatomic, copy) NSString *aString;<br />- (void) someMethod; <br />@end<br /><br />@ implementation MyObject {<br />@synthesize aString;<br />- (id) init {<br />&nbsp;&nbsp;&nbsp; ......<br />}<br />- (void) someMethod {<br />&nbsp;&nbsp;&nbsp; ......<br />&nbsp;&nbsp;&nbsp; aString = [NSString stringWithString: @"blah, blah, blah."];<br />&nbsp;&nbsp;&nbsp; aString = [[NSString stringWithString: @"blah, blah, blah."] retain];<br />&nbsp;&nbsp;&nbsp; aString = [[NSString stringWithString: @"blah, blah, blah."] copy]; <br />&nbsp;&nbsp;&nbsp; self.aString = [NSString stringWithString: @"blah, blah, blah."];<br />&nbsp;&nbsp;&nbsp; ......<br />}<br /></code><br />The compiler would not pop up any warning or error about the code above. But the 1st line in the method is extremely dangerous as well as a bug hard to find: the aString does not own the returned object, which will be released at some time after the method is completed. Corresponding to the second factor that I write above, it is obvious that this sentence has no keywords about ownership. Worse still, although the ownership is considered in the <i>@property</i>, this sentence does not call the setter method. The right way to activate the setter is the 4th sentence. Besides, the 2nd and 3rd sentence request the ownership of the new object in another form. They are legal, of course.<br /><br />[ UPDATE:<br /><br />6. <i>viewDidUnload</i> vs. <i>dealloc</i><br /><br />Unless the program needs to break a retain cycle, it should generally only be releasing objects in the <i>dealloc</i> method. <i>viewDidUnload</i> is an <b>exception</b>; it is invoked in low memory situations and should be used to release anything useless. Then, a preferable way to do this is to write another <i>releaseMemory</i> function where takes most or all of the used objects into consideration and sets them into <i>nil</i>, and then to call this function both in <i>viewDidUnload</i> and <i>dealloc</i>.<br /><br />The general principle is just as mentioned above: if you do need to release them anywhere else, then always set the reference to nil after the release. That will protect the app from blowing up later (likely in dealloc).<br /><br />References: <a href="http://stackoverflow.com/questions/2353321/release-in-viewdidunload-and-dealloc-both">StackOverFlow-1</a>, <a href="http://stackoverflow.com/questions/1768076/are-viewdidunload-and-dealloc-always-called-when-tearing-down-a-uiviewcontroller">StackOverFlow-2</a>. <br />]<br /><br />It is glad that I have gone this far. And, I will move on,&nbsp; and dig deeper.<br /><br />cheers.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find the longest chain under 1M with Collatz Conjecture condition]]></title>
    <link href="http://creasyw.github.io/blog/2011/09/27/find-longest-chain-under-collatz/"/>
    <updated>2011-09-27T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2011/09/27/find-longest-chain-under-collatz</id>
    <content type="html"><![CDATA[<div class='post'>
It is the #14 problem in <a href="http://projecteuler.net/">Project Euler</a>.<br />In general, the Collatz conjecture has two main properties:<br />1. no infinite trajectory occurs;<br />2. no cycle occurs.<br /><br />The basic algorithm is quite straightforward. It just follows the instruction of Collatz Conjecture, which are n = n/2 if n is even, and n = 3*n+1 if n is odd. To accelerate the calculation, I also implemented a hash map, which could be retrieve theoretically in constant time O(1), and use the iteration number as the key in this map and the overall steps towards 1 as the value of that key. Under this situation, whenever a new node is found, it will be added into the map, and continue the computation until it reaches some key which has already stored in the map. That is, the route is undetermined before the calculation, but every number only needs to calculate once.<br /><br />The first problem I met is exactly the problem "<a href="http://stackoverflow.com/questions/6825146/why-am-i-getting-an-outofmemoryerror-in-java/7561025#7561025">Why am I getting an OutOfMemoryError trouble in Java?</a>" described in the StackOverflow. When the program reaches 113383, all of the heap space will be consumed. As I looked up in the internet, all solutions point to how to increase the heap space for Java. While, as I narrowed down the bug to the innermost loop and print out every relevant variable, the bug finally turned out to be the overflow of integer data type. Just change it into long would solve this problem.<br /><br />The second problem had the same symptom but with a much bigger number. When I print out every variable this time, nothing seemed wrong. But if we check the memory usage in run-time, all of the memory had been consumed by the hash map as some number will have extremely long chain towards 1, part of which are far beyond the range of 1000000. The scale is over 1.5 million items in hash map to achieve 725343. The solution is that the program only record number under 1 million, which are within the searching range and also most likely to be hit.<br /><br /><br />Solution discussions: <a href="http://stackoverflow.com/questions/2643260/project-euler-question-14-collatz-problem">[1]</a> (discussion in StackOverflow), <a href="http://lanzkron.wordpress.com/2010/01/18/yet-another-meaningless-javascript-benchmark/">[2]</a> (in JavaScript), <a href="http://lanzkron.wordpress.com/2010/06/02/optimizing-collatz-for-klutzes/">[3]</a> (optimization), <a href="http://blog.functionalfun.net/2008/07/project-euler-problem-14-hailstone.html">[4]</a> (in C++), <a href="http://sandrotosi.blogspot.com/2010/03/project-euler-problem-14.html">[5]</a> (in Python). By the way, <a href="http://stackoverflow.com/questions/235047/why-do-i-get-an-outofmemoryerror-when-inserting-50-000-objects-into-hashmap">here</a> is the discussion about looking up memory usage during run time in Java--it helps me find the 2nd bug. Finally, my solution is in <a href="https://github.com/creasyw/learning/blob/master/puzzles/Q011To015.java">one of my Github repositories</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[something about Java]]></title>
    <link href="http://creasyw.github.io/blog/2011/09/15/java-exploring-from-stackoverflow/"/>
    <updated>2011-09-15T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2011/09/15/java-exploring-from-stackoverflow</id>
    <content type="html"><![CDATA[<div class='post'>
<a href="http://www.cafeaulait.org/course/week2/02.html">Java's primitive data types&nbsp; </a><br /><a href="http://stackoverflow.com/questions/718554/how-to-convert-an-arraylist-containing-integers-to-primitive-int-array">How to convert ArrayList containing Integers to primitive int array?</a><br /><a href="http://stackoverflow.com/questions/6210745/whats-difference-between-math-pow9-18-and-918">What's difference between Math.pow(9, 18) and 9^18?</a><br /><a href="http://stackoverflow.com/questions/303913/java-reading-integers-from-a-file-into-an-array">Reading integers from a file into an array</a><br /><a href="http://stackoverflow.com/questions/6232257/2d-dynamic-array-using-arraylist-in-java">2D dynamic array using ArrayList&nbsp;</a><br /><a href="http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist">When to use LinkedList&lt;&gt; over ArrayList&lt;&gt; or vice-versa?&nbsp;</a><br /><a href="http://stackoverflow.com/questions/40471/java-hashmap-vs-hashtable">Java Hashtable versus HashMap.&nbsp;</a> <br /><a href="http://stackoverflow.com/questions/174093/toarraynew-myclass0-or-toarraynew-myclassmylist-size">.toArray(new MyClass[0]) or .toArray(new MyClass[myList.size()])?</a><br /><a href="http://stackoverflow.com/questions/627784/what-are-some-java-memory-management-best-practices">What are some Java memory management best practices?&nbsp;</a><br /><a href="http://www.briangoetz.com/pubs.html">Publications and regular columns from Brain Goetz</a><br /><a href="http://stackoverflow.com/questions/36701/struct-like-objects-in-java">Struct like object in Java. </a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Largest palindrome made from the product of two 3-digit numbers]]></title>
    <link href="http://creasyw.github.io/blog/2011/09/06/largest-palindrome-made-from-product-of/"/>
    <updated>2011-09-06T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2011/09/06/largest-palindrome-made-from-product-of</id>
    <content type="html"><![CDATA[<div class='post'>
This question is an entry level puzzle from <a href="http://projecteuler.net/">Project Euler</a>.<br /><br />It is very interesting because it has far more pitfalls than it first appears to be. There are some helpful discussions to pick up the whole scenario of this puzzle: <a href="http://codeblog.dhananjaynene.com/2010/01/find-the-largest-palindrome-made-from-the-product-of-two-3-digit-numbers/comment-page-1/#comment-48">1)</a> and <a href="http://pthree.org/2007/09/15/largest-palindromic-number-in-python/">2)</a>. Basically speaking, the first post listed the most straightforward thoughts, which is iterations two numbers both from 100 to 1000 and finding the maximum of the outcomes. While I wrote the algorithm, this is also the first idea came into mind while I added several optimizations on it.<br />1) Decrease one number 1 per step, and iterate the other one from 999 to 100.<br />2) Stop the step whenever it finds a palindrome and march to the next step by decrease the benchmark number by one.<br />3) Meanwhile, increase the lower bound of iterator from 100 to whenever it finds a palindrome. This will exponentially decrease the searching range. e.g. (A--benchmark number, B--iterator) if A*B==palindrome, the searching range for the next step would be [A-1, B]. Because if both numbers less than the previous finding, it must not be the LARGEST palindrome we would like to find.<br />4) The second stop criteria is the iterator equal or less than the lower bound mentioned in the last item.<br /><br />The major pitfall that I did see quite a few people mentioned is alternative decrease two numbers from 999, which the result comes to be 834*836=698896. The difference for two numbers are obviously unnecessary to be less or equal to one.<br /><br />The second reference provides the basic optimization from math point of view. All of the palindrome can be divided by 11, so...<br />P=100000x+10000y+1000z+100z+10y+x<br />P=100001x+10010y+1100z<br />P=11*(9091x+910y+100z)<br />Then, the question is simplified to find two 3-digit numbers, at least one of which should be divided by 11. Similarly as the previous method, if A can be divided by 11, decreasing B by one per time; and if A cannot divided by 11, decreasing B by 11 per time.<br /><br />My solutions for the first 5 puzzles are <a href="https://github.com/creasyw/learning/blob/master/puzzles/q001To005.c">here</a>.<br />cheers,</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editing hex file via Vim]]></title>
    <link href="http://creasyw.github.io/blog/2011/07/25/editing-hex-file-via-vim/"/>
    <updated>2011-07-25T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2011/07/25/editing-hex-file-via-vim</id>
    <content type="html"><![CDATA[<div class='post'>
It took me some time to find useful tools comparing hex file in mac. I had tried DiffMerge, kdiff3, HexEditor, and several other apps whose names I could not recall. At last, the most viable way is still using the vim editor. But the problem was still there: it was painful to look at hex code in that editor.<br /><br />Solution:<br />Adding some configuration in the ~/.vimrc will make everything peace and clean:)<br /><br /><code><br />" vim -b : edit binary using xxd-format!<br />augroup Binary<br />au!<br />au BufReadPre  *.bin let &amp;bin=1<br />au BufReadPost *.bin if &amp;bin | %!xxd<br />au BufReadPost *.bin set ft=xxd | endif<br />au BufWritePre *.bin if &amp;bin | %!xxd -r<br />au BufWritePre *.bin endif<br />au BufWritePost *.bin if &amp;bin | %!xxd<br />au BufWritePost *.bin set nomod | endif<br />augroup END<br /><code></code></code><br /><br />Note that this configuration only works with the file with .bin extension, which is already enough for me to hack into the targeting files:) Check the reference #1 for further reading of more general hex file editing.<br /><br />cheers:)<br /><br />References:<br />1) <a href="http://vim.wikia.com/wiki/Improved_hex_editing">Improve hex editing</a><br />2) <a href="http://www.tuxfiles.org/linuxhelp/vimcheat.html">Vim commands cheat sheet</a></div>

]]></content>
  </entry>
  
</feed>
