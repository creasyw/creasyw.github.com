<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: My Life | Qiong Wu]]></title>
  <link href="http://creasyw.github.io/blog/categories/my-life/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2014-09-23T09:25:06-05:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Half of Summer Season Has Gone]]></title>
    <link href="http://creasyw.github.io/blog/2014/06/23/half-of-summer-season-has-gone/"/>
    <updated>2014-06-23T14:01:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2014/06/23/half-of-summer-season-has-gone</id>
    <content type="html"><![CDATA[<h3 id="tennis-and-exercises">Tennis and Exercises</h3>

<p>Until now, I’ve played three matches in this round of 3.0 league, lost twice (6-3, 6-3; and another was 7-5 for two hours and left unfinished), and won once (6-4, 1-6, 10-5). My improvements are quite obvious, but still not big enough for me to turn previous loses towards the same opponents to landslide victories. To the maximum extent, I would not lose a set 4 points straight, but stuck in “deuce…add-in…deuce..add-out…” loops.</p>

<p>These are some aspects I should pay attention to</p>

<ul>
  <li>Do NOT make decisions before hitting the balls. They should depend on how good my response is, as well as the position and momentum of my opponent.</li>
  <li>During the point building, keep percentage shots as long as I can.</li>
  <li>And DISTINGUISH it from capitalizing.</li>
  <li>Do NOT be afraid of volley, and do NOT rush it.</li>
  <li>For current level, attacking the back-hand side is almost always a good choice.</li>
</ul>

<p>In general, I don’t have any blank left for any tech. aspect, but almost everything needs to be further improved: adding more top spin for both forehand and backhand ground stroke, being more consistent of back spin in half-volley, splitting timely and positioning myself more appropriate as approaching to the net, and better serving.</p>

<h3 id="trip">Trip</h3>

<p>It was great to see the awesome grand canyon, as well as the horseshoe bend and the antelope valley, and it sucked as I recalled the trip of yellowstone every minute in every day. I thought I had got over of the devastation after seven months. But this trip just proved that I was wrong in a hard way.</p>

<p>I will not rush myself to the conclusion of “feeling well” again, and will not do another trip in the near future.</p>

<h3 id="programming-and-online-courses">Programming and Online Courses</h3>

<p>“Know how to solve every problem that has been solved.” – Richard Feynman</p>

<p>There are many things that I need to prepare before the graduate and really job-hunting. Actually, there are more things in my mind than I could complete. So I should choose wisely.</p>

<p>Currently, I am enrolled in the course “Principle of Computing” offered by Rice University in Coursera. It’s easy in general, but interesting to re-think those small games mathematically with the “programming” point of view. Besides, I also continue reading SICP and solving the problems in each chapter. I also go on reading books for Haskell, and watching a course about artificial intelligent in edX. Combining with what I have learned in machine learning and algorithm, I should have a better grasp about what to do and how to do in this field of study. On the other hand, I’ve also dropped off several courses for too much overlapping with what I have already known, or for tedious pedagogy and far-fetched implementations.</p>

<p>I have extensively used Emacs for this summer. Sometimes, I even appreciate its methodology more than I do for Vim, though I would still prefer Vim for 90% of occasions. After tried and failed several times to customize it from scratch, I started beginning with Prelude, and then piling other stuff on it. Despite in favor of most its adds-on, I disable the Viper mode. The logic behind is that if I want to use a Vim, I will use the Vim. Before I fully appreciate its advantages and disadvantages, I would like to keep Emacs as it is. Currently, I use Haskell and Racket in it. It does do a better job than Vim for Haskell, and DrRacket for Racket. Besides, I have tried twice of adopting R in current work, but still cannot find a scenario exclusively using it. It’s not really good at modeling (LISP or Haskell), visualization (matplotlib in Python, JavaScript, or Mathematica), computational efficiency (C++, or Haskell), or just for fun (LISP, ML, or Ruby). Given it is THE favorite language of some of my very smart friends, I will give it another try whenever possible.</p>

<h3 id="miscellaneous">Miscellaneous</h3>

<p>Doing some experiments on myself is fun and worthwhile. For example, I have tried several days to go to bed earlier than I usually do. My feeling is more or less the same as what said in <a href="http://dealbook.nytimes.com/2014/06/27/sleep-as-a-competitive-advantage/?_php=true&amp;_type=blogs&amp;_php=true&amp;_type=blogs&amp;_r=1&amp;">“Sleep as a Competitive Advantage”</a>, and I will stick to it.</p>

<p>Because I need to toss the tennis ball better, I use my left hand as often as I can, such as drawing diagrams or doing all kinds of doodle/calculations. It’s too soon to tell if I have any progress. I am also trying different ways to brew coffee. Pour-over versus press pot seems like another version of Emacs versus Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Survive on Busy Two weeks]]></title>
    <link href="http://creasyw.github.io/blog/2014/04/05/survive-on-busy-two-weeks/"/>
    <updated>2014-04-05T09:47:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2014/04/05/survive-on-busy-two-weeks</id>
    <content type="html"><![CDATA[<p>I am glad that I could survive on three-hours sleep per day for almost two weeks. Of course, there were quite a few downsides: I felt very weak after the first several days, and the feeling lasted till the end; I lost 1 and dropped the other 2 times of tennis matches in this period; my Github longest streak of contribution stopped at 200 days, which is the date right before my comprehensive defense…</p>

<p>The things that I completed in return include:</p>

<ul>
  <li>A 96-pages thesis for the comprehensive defense</li>
  <li>A collection of decent slides built by Beamer/Latex for defense</li>
  <li>Passed it =D</li>
  <li>A part of one NSF proposal</li>
  <li>One research paper submitted to Globecom’14</li>
  <li>Mid-term II of Game Theory</li>
  <li>One reviewing paper from EuraSip</li>
  <li>The least amount of homework and projects in Coursera that keep me within the schedule</li>
</ul>

<p>Furthermore, there are lots of lessons to take away from this process. Concerning the defense about research, I find myself still need to adjust the strategy handling problems. In research, it is not about getting thing done, but about how to propose the right question (relevant with the basic/advanced theorems of the related fields) and to make at least some sense out of it.</p>

<p>For the research, I should not pile up most of the work to the last week of the due date, especially when I could anticipate this busy schedule months before. In Jan. and Feb., I did waste plenty of time to try out different algorithms handling the problem, but none of them had the “sky-high” performances, so I just kept trying. Eventually, when the time run out, I chose the “sub-optimal” solution and wrote the paper in a hurry. This should not be the right way. Sometimes, when the theoretical merits are fascinating, I might need to only derive the theorems and formulas with some naive simulations. When the trial and error process has to perform, I should set a “early termination” threshold and record every “best effort” in different scenarios. It will help me leisurely handle the due date, and maybe produce more work/papers.</p>

<p>I hope I won’t have this kind of busy schedule again, in the sense that I have a better planning and complete each work as soon as I can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 2013 and new year resolution]]></title>
    <link href="http://creasyw.github.io/blog/2013/12/31/my-2013-and-new-year-resolution/"/>
    <updated>2013-12-31T10:13:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2013/12/31/my-2013-and-new-year-resolution</id>
    <content type="html"><![CDATA[<p>没有想到，这一年能发生这么多的事情。效率从年初开始，越来越高。然后是暑假实习，认识了很多有趣的人，开始打网球。去了波多黎各和维京群岛，看到一生迄今为止最蓝的海。回来后继续打网球，开始瘦身，失散了三十年的六块腹肌和人鱼线都找到了，可年末却把豆豆丢了。痛彻心扉的最后两个月，不太清楚自己是怎么度过的。</p>

<h3 id="statistics">Statistics:</h3>

<p>过去的一年，在学校里修了两门课，GPA还是4.0。发表了三篇文章，还有三篇在等消息，两篇在写，为IEEE Trans. of Signal Processing 和ICC2014 审了两篇论文。此外，在Coursera上完成了6门课，其中收获最大的有Dan Grossman 的Programming Language 以及Tim Roughgarden 的Algorithm Analysis I &amp; II。比较可惜的是Andrew Ng 的 Machine Learning，课程和作业都过半了，但因为自己的论文进度太紧，这门课最终还是没能完成。希望它来年还能再开。</p>

<p>根据豆瓣上的统计，这一年我看完19本书，听了27盘专辑，看了50部电影。其中看过最好看的书是现在还没有读完的巨著SICP…好看的电影包括Argo, The Social Network, Now You See Me, and Star Trek Into Darkness；听歌因为大量使用Douban FM 和Pandora，已经无法具体记录了。另外，完成了2325小时的编程。从九月到年底，用nike running 跑了110 miles，越跑越快，从九月份的7’36”/mi 到十二月的6’47”/mi。体重从78公斤降低到现在的68公斤，腹部和手臂的肌肉都清晰可见了。还有很多东西没有量化，比如网球的一发成功率，主动得分，以及非受迫性失误，等等。</p>

<h3 id="programming">Programming:</h3>

<p>在Coursera上的几门课程对我帮助很大，从熟悉新的编程语言，到高屋建瓴的指导如何实践。这一年新学的语言包括ML, Scala, Ruby, and Haskell，其中前三个都是课程里涉及的。编程时间的积累已经过半，到了5750小时。从简历上，我可以堆出一大坨熟练使用的语言。而对自己而言，进步最大的有两方面。其一，现在可以用很短的时间，甚至是一个下午，去学习一门新的编程语言，其实只用熟悉常用的语法就好，其中的范式和思想都是共通的。其二，对于算法和数据结构的掌握，让我能在更短的时间里将一个具体问题转变成模型。</p>

<p>这一年也花了大量的时间写C++代码，实习里用到了，自己的项目也用到了。但写来写去，依然不喜欢这个语言——繁琐，庞大高效，想做所有的事情却鲜有亮点。用Jobs描述微软的词语来形容C++也是合适的，no taste。使用它，仅仅是因为所处状况暂时没有其他选择而已。在2014年里，计划将实验室的项目逐渐向Haskell过渡，当必须使用OOP的时候，用Scala。至于继续提高的方向，暂时还没想到什么新的语言特别值得学习(maybe Lua, R, or Javascript)，但需要花时间把Compiler看完，然后读完三本2013积攒下来的书：SICP, The Scheme Programming Language，和Real World Haskell。若是此外还有空余，可以旁听一下iOS的课程，重温一下已经放下两年的Obj-C。</p>

<p>因为Haskell的缘故，这几个月越来越多的使用Emacs。发觉一个有关它的笑话大体是对的，Emacs的启动时间都足够用Vim写完一个脚本了。当然，依此类推，启动Eclipse都足够写完一个项目了。。。现在我主要还是是把Emacs当Vim来用，除了C-c C-l来加载Haskell的Compiler，我只不过是在使用Vim里对应的快捷键组合来写程序。我也知道，有关Emacs最吸引人的.el 脚本，我还没有过多涉及。希望在接下来的一年里，我能像使用Vim一样熟练的使用Emacs，有一套自己的加载脚本，多一个得心应手的开发工具。</p>

<h3 id="sth-else">Sth. else</h3>
<ul>
  <li>每周锻炼3-4次</li>
  <li>晋级 Tennis Recreation League 3.5</li>
  <li>累积2500+小时的编程</li>
  <li>毕业</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My August and a new beginning]]></title>
    <link href="http://creasyw.github.io/blog/2012/09/14/my-august-and-new-beginning/"/>
    <updated>2012-09-14T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2012/09/14/my-august-and-new-beginning</id>
    <content type="html"><![CDATA[<div class="post">
<br />八月份，是个开始的月份，来到了一个小屯子里，没有公交，没有市集，只是明晃晃的阳光，会照的人发晕。当真是个修行的地方。有关这里，想法都有关不要虚度光阴，要快些离开这里。<br /><br />月中，和大瀾、乌龟、聪哥、温总一起去了黄石，西雅图，以及波特兰。这次旅行，如同酿酒发酵一般，越到后来越是留恋。<br /><br />刚到Bozman的时候，大瀾看着大山都激动的手舞足蹈。然后进入黄石以后，各种臭泉以及异常干燥的气候弄的大家都越发烦躁起来。大瀾背着手，像居委会大妈一样视察颜色异常的泉水；也会二劲儿大发，摘下花来给每个人带上，拍个大头贴。大乌龟在走trail时候，被路上唯一的一个钉子扎破了后背。甩着舌头奔跑的牦牛，成群在树林里休息的大鹿，elk or moose。在大峡谷的晚上，八月间，大家竟然都被冻醒了，我迷迷糊糊间，看着大瀾给我盖被子，感动了好久。<br /><br />三日后的大提顿满是惊喜。前一天晚上大瀾肚子疼的没吃好晚饭，扶她回房间后，我连吃饭的心思都没有了，更不要说后一天的提顿之旅。第二天早晨，大家也是有懒床的，有睡回笼觉的。只有唯一想去的温总，一肚子郁闷说不出口。而且刚启程，就发现没带门票，又折回。我开着车都能想到留守的聪哥似笑非笑的的得意样子。最终正午才进入大提顿，就遇见了满眼惊喜。厚厚的草甸，飘满小花的湖泊。大瀾拄着两人多长的树枝照相。在Jackson Lake租船的时候，旁边的小孩儿们兴奋的举着水瓶，炫耀捉住的水蛭。大瀾在船上，看不出任何身体异样，兴奋的拍水，尝试各种怪异的划船方法，几次都殃及到了坐在后面的我。但不管怎样，我俩划起船来，左右开工，还喊着号子，小船乘风破浪的指那儿打哪儿，相比而言，乌龟和温总的另一艘船大多就是在原地打转了。上岸之后，我们还在岸边的饭馆儿吃了进黄石以来最丰盛的一顿饭。在Jenny Lake，看着一湖清水，我和温总都脱到只剩内裤，跳进去玩水，结果上岸时候悲剧了，小石子们就像是锥子一样，走向岸边每一步都钻心的疼。。。大瀾在岸边，一边叹息着想游泳啊想游泳，一边带着乌龟和温总的俩单反，不断练习摄影技术。傍晚看日落，所有的山峰都一览无余，感慨自然壮丽。然后在把车开到山间处，再看一遍日落，再感慨一遍。晚上回程，看到了过马路的小狐狸，也许是被车灯照迷糊了，久久不离去，真想把它抱回来养。<br /><br />晚上回到酒店，又出门，和大瀾并排躺在码头上，我第一次清楚看到了银河，像棉絮一样一团一团的，还看到了流星。拉着大瀾的手，看着奇妙的景色，时间就静止了。<br /><br />到西雅图的第一天晚上，还有更多的惊喜。从倾斜的街道看到大海，身旁小酒馆门庭若市。城市真好。也是在这个时候，我们发现Yelp的预算对我们不适用。$的我们可以吃成$$$，$$的我们能吃成$$$$的。几个难民坐在日式料理最靠窗的桌子，烤肉、寿司、炒饭、拌面...，我们狼吞虎咽的样子，就是这家店最好的活体广告了。酒馆、小肥羊、牛逼的图书馆、大麻公园、面海公寓、满是鲜花的阳台，这就是我对西雅图的印象。<br /><br />去波特兰是因为Grimm。精致的block，友好的大瀾校友，以及玫瑰花园。我们在市区停留只有半日。然后就是一个小时的公车，从二十几街坐到了245街。。作为这座庄园里唯一一队乘坐公车前来的客人，我们受到了主人的热情接待，安排我们住宿在一个墙上画着这个庄园某位109岁员工的房间里。庄园的晚饭不错，温总一时兴起喝了六七杯或者十来杯红酒，结果把大乌龟给喝醉了，嚷嚷着要脱衣服去游泳，又把聪哥紧张的如同被非礼了一样。。晚饭后我们还视察了庄园的绿化状况，并亲切会见了酒馆里的各种奇怪大叔大妈。<br /><br />转眼相聚就要分离，回家的回家，旅行的继续上路，确实舍不得另外三位。昨天在豆瓣上读到马克吐温的一句话，“好友、好书，不轻易判断是非，这就是理想生活”。一路上颠簸，没读什么书，这生活却以足以让我留恋了。<br /><br />在这里，开始学习工作快满一月了。老板人不错，几次问他有关研究的问题，他都很耐心的回答，给的方法也足够有操作性。今天一个师兄作报告被骂，也从另一个侧面证明老板足够聪明，不能唬弄。组里大家关系也很融洽，实验室、图书馆，资源也算充裕。新车也用的顺手。还是开始时的那个想法，不要浪费时间，早些离开这里。</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary of 2011 and Resolution of 2012]]></title>
    <link href="http://creasyw.github.io/blog/2012/01/14/summary-of-2011-and-resolution-of-2012/"/>
    <updated>2012-01-14T00:00:00-06:00</updated>
    <id>http://creasyw.github.io/blog/2012/01/14/summary-of-2011-and-resolution-of-2012</id>
    <content type="html"><![CDATA[<div class="post">
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <br />这是一篇想了很久的日志。过去的一年，发生了很多叵测的事情，我学到了很多，也付出了不小的代价。接下来的这一年，也许会有很多重要的事情发生。无论如何，对于经历的2011，把感想趁着鲜活的时候写下来，也算是对自己的一个交代。<br /><br />@implementation 2011_Summary<br /><br />1. 诚实。这是上一年最大的教训。无论是在学习、研究上，或是与陌生人的交往，还是对待自己最亲密的人，诚实永远是唯一正确的选择。我了解，它的反面是一个多么贬义的行为。但总会有一些时候，要么是觉得自己已经付出了很多努力，所以取些捷径也没什么大过错；要么就是压根儿的应激反应，连自己都无法解释。事后回头看的时候，才会感叹自己的价值观有多么脆弱。但自打意识到之后，再这样任由其发展下去，就太说不过去了。上一年我已经得到了足够多的教训，能够让我在每次自省的时候都深深训诫自己，去努力做到这个简单的品质。<br /><br />2. 编程。这是上一年最大的收获。再往之前岁月里寻找，所有的技能、知识都是和学业紧紧连成一体的，于是，就都是些必须去做却又苦逼的差事。也许是从一零年开始的，编程的乐趣逐渐让和它相关的知识自成体系，从其它知识里分离了出来。首先，编程和学习语言一样，可以清晰感觉到点滴的积累。昨天又会了一个新的框架，今天又学了一个新的trick，于是重写代码的程序效率提高了500％。其次，网络上丰富的社区，把全世界有相同爱好的聪明头脑都集中在了一起，类似于之前小学初中，我到了一个足球传统学校，和一群踢球牛逼的人一起，于是也开始爱上了足球。两者的区别在于，踢球好的人往往不爱带踢球不好的，但技术社区里，包容性强了很多。当然，根本差别是，这里没有任何地域限制。和聪明人交流，总是一件愉快的事情。提问、回答，各种限时或不限时的项目，奇怪的题目集锦，可以玩儿的不亦乐乎。当然，最重要的原因是，这件事情，可以让自己不断提高，并且帮助别人获得些便利，若是足够努力，还能让世界变得更好。这是一个多么牛逼的事情啊！<br /><br />之前我的编程经验都是和硬件相关的，一个程序两条线索推进，其间的区别是浮点计算和定点计算⋯⋯我并非说之前的C代码都不值得一提。相反，从算法的浮点实现，到定点应用限制，其间的各种考量，甚至是算法重新设计，所需知识和工作量都是巨大的。并且，我也基本同意 <a href="http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html">Joel Spolsky</a>&nbsp;的观点，学习这种底层代码对于程序员的基本功至关重要。但毕竟，C太原始了。几乎所有的模块都需要自己来搭，就算考虑到reusability这仍然是一件很蛋疼的事情。有语义更人性化的Python，有模块化更好的Java，有更有趣的Obj-C，若是想挑战一下理解力，还可以用Lisp。有句话已经忘记了出处，大意是讲，没有最好的编程语言，只有对于某项工作最合适的语言。这是没错的。打开自己的眼界，学习更多的语言，也就有了更多的乐趣。⋯⋯当然，若是回答问题“你最喜欢哪种编程语言？”我还是会说C，我喜欢那种掌控所有细节的感觉，是为了最大限度的榨取硬件计算能力，也是因为程序没有任何的暗箱，似乎心里能安然很多。<br /><br />3. 阅读。算上各种教材，去年总共读了大约20本书，其中精读的十本左右，都是大部头。收获还是不错的。还有另一个阅读源就是google reader，订阅的东西从一零年的google group，换到了hacker news，吵架还是有，只是方式方法更加多元化了。比如C语言该换还是不该换，Java好还是不好，Node.js是不是癌细胞，以及.Net程序员到底是不是傻逼⋯⋯各种大坑，于是各路英豪就各种姿势往里面跳。<br /><br />今年效率最高的时候是读man-month，因为课程演讲需要，所以总共花了一天的时间就看完了，再加上摘抄笔记和整理的幻灯片，一整天下来感觉学到了不少。而收获最多的两本书是，K&amp;R C 和 CLRS。两本书很多章节都看了两遍。所谓经典教材大概就是如此了，好像每字每句都经过了斟酌，复杂的理念都能表述的很有条理；而因为所涉及的基础知识涵盖太广但书籍篇幅有限，作者只好把一些次重点的东西用小字写下来，或者一笔带过，这也就是需要反复翻看的原因了。此外，阅读积累的质变似乎是在一零年末开始的，不在抵触大部头的英文著作了。而且读下来再翻回头看译著，发现译文里漏洞百出，而且很多晦涩的中文名词，反正也是生僻词，还不如原来英文解释的顺畅。<br /><br />4. 水果。乔布斯去世是一一年的一件大事情，而五月份我买了MBP，算是正式成为一名水果消费者了。之前，有不同的人和我讲过各种苹果的坏话，总之两个词，就是装逼和不兼容。前者我倒是无所谓，所谓装逼或者牛逼，冷暖自知，而且在努力牛逼的过程中，装装也未尝不可^_^。而之前不同人讲的不兼容倒是真的唬过我一段时间。之后用了很久的ubuntu，想来这个linux都用的欢喜，来个unix加小清晰界面的Mac OS也没啥。然后就买了。现在来看，未来很长的一段时间里，除非苹果倒闭了，否则我几乎没有可能把主要工作平台换回windows。所有的工作都可以顺利完成，没有任何兼容问题，方便的购买正版软件，程序可以方便的迭代升级，加之这个平台的软件用起来大都十分顺手，而且自己最近还在鼓捣Obj-C。这个操纵系统的转换是成功的。PS. 这个系统是否安全，似乎是另一个永恒的争论话题。而对于所有惧怕这个系统不安全的人们，可以自修一下计算机操作系统这门课，或者Google一下win和unix的差别，以及如何保护系统安全，或者读一下<a href="http://mac.appstorm.net/roundups/utilities-roundups/5-mac-antivirus-tools-for-os-x-and-do-we-need-them/">这篇不错的文章</a>。<br /><br />而至于乔布斯，使用了他创造的产品和平台之后，他去世的消息也更让我感到悲伤。从产品线到操作系统到平台，所有的一切就好像一盘缜密围棋，在他去世之后回溯的审视，所能感受的除了惊叹也就只有悲伤了。有关他的文章很多，但最好的一篇，没有之一，是他亲生姐姐写的<a href="http://www.nytimes.com/2011/10/30/opinion/mona-simpsons-eulogy-for-steve-jobs.html?_r=2&amp;pagewanted=all">悼词</a>。每当自己想倦怠的时候，看一看，总会或激励或愧疚，重新开始好好做自己的事情。<br /><br />5. Instapaper。Marco Arment写的牛逼应用。我是他博客的忠实读者，也喜爱这个应用。其实我决定使用水果系统，他博客里一系列文章也是功不可没。他还是Tumblr的创始人，以及苹果的超级粉丝。所以当他提到Android以及Windows Phone时候那种戏谑的语气，很是有趣。而更令我着迷的，是他所处的状态，专职做一件自己喜爱的事情，如同一个艺术家一样不断更新完善自己的创作，这个创作受到很多人的喜爱、帮助别人更好的获取资讯，并且自己依靠这个创作获得收入，活的还不错。很多时候我会想，就算自己的爱好不能达到“专职”以及”依靠创作获得收入“，但起码可以努力做到其余的部分。换句话讲，我找到了自己的爱好，尽管不确定能不能用它获得博士学位，或是以它营生，但我确定这是件有意义的事情，所以我也会一直坚持坐下去的。<br /><br />6. 10000小时。之前似乎在别的地方也看到过，但已经找不到出处了，也没想过太多，直到读了<a href="http://www.ruanyifeng.com/blog/2011/04/the_dan_plan.html">阮一峰的日志</a>，我才认真思考这个数字的意义。当然，也有其他人计算自己的工作时间，算出来每年能工作2160小时，这样五年能有超过一万小时的积累。但具体看看计算方法，似乎从坐在写字台前开始，连回复工作邮件的时间都算上了，而且取样一天，然后乘以360天/年。这个就有点儿扯了。想要成为乔丹、盖茨或者类似的人，应该要更困难些地吧？比如莫扎特成名前有超过10000的训练，不能把他擦钢琴的时间算在内，乔丹的训练时间应该也不包括他在球场边和拉拉队员们扯淡的时间。训练就是训练，可以包括冥想、包括查找资料、包括 trail and error，包括一切和提高与之相关能力的活动时间。但也仅限于此。我一直在跟着<a href="http://www.thedanplan.com/">这个家伙</a>的网站，现在他已经领先我将近200小时了，希望我能在不久的将来追回来。<br /><br />6. 读库以及独立书店。这个和我自己似乎没有什么关系，但有些想法，也记在这里好了。光合作用和第三极，独立书店的倒闭引得一篇哀鸣。也许我只是以站着说话不腰疼的态度审视，可我真是觉得它们只是市场运转的一个结果而已。第三极书籍分类十分混乱，光合作用开店布局不合理，内设咖啡馆不伦不类，书籍既不全又没有特色⋯⋯总之，作为消费者，很难看出来它们的拥有者在真正用心的经营。等到被淘汰的时候在对着媒体感叹生态圈的恶劣？也成，算是对投资方的一个交代。<br /><br />和它们对比的，是读库，店小六的用心给我很深刻的印象。嗯，我觉得似乎应该叫六哥或者六叔了⋯⋯订阅读库的一年里，精美的书签，或是特别的环保袋，或者几本赠阅的香港杂志，随时可能随着书籍一同收到。如果有疑问，发邮件有问必答，短信也回复。想想读库的订阅群体数量，而编者只有一人，这样的效率着实令人钦佩。另外，读库和连锁的光合作用或是曾经占有一座大楼的第三极，应该是生活在一个生态圈里，唯一的差别在于读库因为小众，所以少些博弈筹码。当当曾经（或者现在仍然）拖欠了读库几十万的书款，投放到新华书店等传统渠道的书款也总是收不回来，但读库的结果是，偶尔困难时候化险为夷，正常时候生活的有滋有味。全心全意去完成这项工作，应该是其中很重要的一个原因吧。<br /><br />@end<br /><br />---<br /><br />@protocol 2012_Resolution<br /><br />1. 训练时间追上并且不再落后与Dan<br />2. 发布至少一个app<br />3. 精读至少15本专业书籍<br />4. 写一篇研究论文<br />5. 可以熟练使用Lisp<br /><br />[UPDATE: five more general guidelines<br />Learn things<br />Play sports<br />Sing and play instruments<br />Draw and paint<br />Write stories<br />]<br /><br />@end<br /><br /><br /><br />cheers,</div>
]]></content>
  </entry>
  
</feed>
