<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Qiong Wu]]></title>
  <link href="http://creasyw.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2014-02-13T23:53:30-06:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[great resources for C.prog.lang]]></title>
    <link href="http://creasyw.github.io/blog/2011/04/24/great-resources-for-cproglang/"/>
    <updated>2011-04-24T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2011/04/24/great-resources-for-cproglang</id>
    <content type="html"><![CDATA[<div class="post">
Basic commands and references:<br /><a href="http://cprogramminglanguage.net/">C Programming Language</a><br /><a href="http://www.cprogramming.com/tutorial.html">C/C++ references</a><br /><a href="http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list">The Definitive C++ Book Guide and List</a><a href="http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list" target="_blank"></a><br /><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">Google C++ Style Guide</a><br /><a href="http://www.viva64.com/en/l/">Lessons on development of 64-bit C/C++ applications</a><br /><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-088-introduction-to-c-memory-management-and-c-object-oriented-programming-january-iap-2010/">MIT C/C++ Introductory course</a> <br /><a href="http://www.blogger.com/goog_157129008">Solution manual of "The C Programming Language" (Kernighan &amp; Ritchie)</a><br /><a href="http://coolshell.cn/articles/2365.html%20">两个C++的library</a><br /><a href="http://www.readwriteweb.com/hack/2011/06/free-e-books-on-c-and-cpp.php">Six free E-books on C and C++ </a><br /><br />Algorithms:<br /><a href="http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_hashtable.aspx">Complicated data structure and algorithms</a><br /><a href="http://coolshell.cn/articles/3961.html">“火柴棍式”程序员面试题 </a><br /><a href="http://coolshell.cn/articles/3790.html">如何调试makefile变量</a><br /><a href="http://coolshell.cn/articles/3738.html">打印质数的各种算法</a><br /><br />Suggestions &amp;&amp; methodologies:<br /><a href="http://programmers.stackexchange.com/questions/62502/small-c-projects">Small C projects</a><br /><a href="http://coolshell.cn/articles/2250.html">21 days vs. ten years</a> <br /><a href="http://coolshell.cn/articles/4102.html">如何学好C语言</a><br /><a href="http://coolshell.cn/articles/4119.html">如何学好C++</a><br /><a href="http://coolshell.cn/articles/2287.html">C++程序员自信心曲线</a><br /><a href="http://coolshell.cn/articles/830.html">语言的歧义</a><br /><a href="http://coolshell.cn/articles/551.html">C语言下的错误处理的问题</a><br /><br />In-depth discussions:<br /><a href="http://www.cs.bell-labs.com/who/dmr/primevalC.html">Primeval C: two very early compilers&nbsp; </a><br /><a href="http://eli.thegreenplace.net/2011/05/02/the-context-sensitivity-of-c%E2%80%99s-grammar-revisited/">The context sensitivity of C’s grammar</a><br /><a href="http://www.rs.io/c-is-a-wasteland/">C is a Wasteland </a><br /><a href="http://warp.povusers.org/programming/cplusplus_superior_to_c.html">Why C++ is vastly superior to C</a><br /><a href="http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php">Which programming languages are fastest?</a><br /><a href="http://www.codinghorror.com/blog/2007/03/top-6-list-of-programming-top-10-lists.html">Top 6 List of Programming Top 10 Lists</a><br />&nbsp;A Guide to Undefined Behavior in C and C++: <a href="http://blog.regehr.org/archives/213">Part1</a>, <a href="http://blog.regehr.org/archives/226">Part2</a>, <a href="http://blog.regehr.org/archives/232">Part3</a>.<br /><a href="http://www.syntax-k.de/projekte/go-review">Go Programming Language, Or: Why all C-like Programming Languages Except One Suck</a><br /><a href="http://blog.kowalczyk.info/article/af1h/Experience-porting-4k-lines-of-C-code-to-go.html">Experience porting 4k lines of C code&nbsp;</a> <br /><a href="http://www.johndcook.com/blog/2011/06/14/why-do-c-folks-make-things-so-complicated/">Why do C++ folks make things so complicated?</a><br /><a href="http://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope/6445794#6445794">Can a local variable's memory be accessed outside its scope? </a><br /><br />Some of my thoughts:<br />Keep writing in C to solve the algorithm problems.<br />Transform to Clojure/C++/Python whenever the application scenario needs.<br />Read more about Perl/Python/Java.<br />Try to solve some puzzles or challenges everyday</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtual function and template in C++]]></title>
    <link href="http://creasyw.github.io/blog/2011/03/29/virtual-function-and-template-in-c/"/>
    <updated>2011-03-29T00:00:00-05:00</updated>
    <id>http://creasyw.github.io/blog/2011/03/29/virtual-function-and-template-in-c</id>
    <content type="html"><![CDATA[<div class="post">
Object-oriented programming is based on three fundamental concepts:  data abstraction, inheritance, and dynamic binding. In C++ we use  classes for data abstraction and class derivation to inherit one class  from another: A derived class inherits the members of its base  class(es). Dynamic binding lets the compiler determine at run time  whether to use a function defined in the base or derived class.<br /><br />Inheritance  and dynamic binding streamline our programs in two ways: They make it  easier to define new classes that are similar, but not identical, to  other classes, and they make it easier for us to write programs that can  ignore the details of how those similar types differ.<br /><br />By  default, function calls in C++ do not use dynamic binding. To trigger  dynamic binding, two conditions must be met: First, only member  functions that are specified as virtual can be dynamically bound. By  default, member functions are not virtual; nonvirtual functions are not  dynamically bound. Second, the call must be made through a reference or a  pointer to a base-class type.<br /><br />In <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</a>, a <b>virtual function</b> or <b>virtual method</b> is a <a class="mw-redirect" href="http://en.wikipedia.org/wiki/Function_%28computer_science%29" title="Function (computer science)">function</a> or <a class="mw-redirect" href="http://en.wikipedia.org/wiki/Method_%28computer_science%29" title="Method (computer science)">method</a> whose behaviour can be <a class="mw-redirect" href="http://en.wikipedia.org/wiki/Method_overriding_%28programming%29" title="Method overriding (programming)">overridden</a> within an inheriting class by a function with the same <a href="http://en.wikipedia.org/wiki/Method_signature" title="Method signature">signature</a>. This concept is a very important part of the <a href="http://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29" title="Polymorphism (computer science)">polymorphism</a> portion of <a href="http://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</a> (OOP). <a href="http://en.wikipedia.org/wiki/Virtual_function">(Wikipage</a>)<br /><br />Virtual functions overcome the problems with the type-field solution by  allowing the programmer to declare functions in a base class that can be  redefined in each derived class. The distinction between virtual and non-virtual resolves this ambiguity.  If the function in question is designated "virtual" in the base class  then the derived class's function would be called (if it exists). If it  is not virtual, the base class's function would be called. C++ non-virtual function calls are resolved at compile time with static binding, while virtual function calls are resolved at run time with dynamic binding<br /><br />A destructor in base class need to be declared virtual.<br /><br />Calling a method with an object pointer always invokes:<br />»&nbsp;&nbsp;&nbsp;&nbsp; the most derived class function, if a method is virtual<br />»&nbsp;&nbsp;&nbsp;&nbsp; the function implementation corresponding to the object pointer type (used to call the method), if a method is non-virtual<br /><br />A  virtual destructor works in the same way A destructor gets called when  an object goes out of scope or when we call delete on an object pointer  When any derived class object goes out of scope, the destructor of that  derived class gets called first It then calls its parent class  destructor so memory allocated to the object is properly released. But,  if we call delete on a base pointer which points to a derived class  object, the base class destructor gets called first (for non-virtual  function). We should use virtual destructors if we call delete on a base  class pointer which points to a derived class<br /><br />=========<br /><br />Templates are the foundation of generic programming, which involves  writing code in a way that is independent of any particular type. The  library containers and iterators are examples of generic programming.  There is a single definition of each container, such as vector, but we  can define many different kinds of vectors that differ by the element  type that the vector contains. Similarly, we can, and have, used  templates without understanding how they are defined.<br /><br />A  template is a blueprint or formula for creating a class or a function. A  function template is a type-independent function that is used as a  formula for generating a type-specific version of the function. For  example, the standard library defines a single class template that  defines what it means to be a vector. That template is used to generate  any number of type-specific vector classesfor example,  vector&lt;int&gt; or vector&lt;string&gt;.<br /><br />reference &lt;<a href="http://www.amazon.com/Primer-4th-Stanley-B-Lippman/dp/0201721481/ref=sr_1_1?ie=UTF8&amp;qid=1301455836&amp;sr=8-1">C++ primer</a>&gt;</div>
]]></content>
  </entry>
  
</feed>
