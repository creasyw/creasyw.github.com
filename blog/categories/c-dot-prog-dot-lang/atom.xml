<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C.prog.lang | Qiong Wu]]></title>
  <link href="http://creasyw.github.io/blog/categories/c-dot-prog-dot-lang/atom.xml" rel="self"/>
  <link href="http://creasyw.github.io/"/>
  <updated>2013-09-04T19:56:40-04:00</updated>
  <id>http://creasyw.github.io/</id>
  <author>
    <name><![CDATA[Qiong Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Largest palindrome made from the product of two 3-digit numbers]]></title>
    <link href="http://creasyw.github.io/blog/2011/09/06/largest-palindrome-made-from-product-of/"/>
    <updated>2011-09-06T00:00:00-04:00</updated>
    <id>http://creasyw.github.io/blog/2011/09/06/largest-palindrome-made-from-product-of</id>
    <content type="html"><![CDATA[<div class='post'>
This question is an entry level puzzle from <a href="http://projecteuler.net/">Project Euler</a>.<br /><br />It is very interesting because it has far more pitfalls than it first appears to be. There are some helpful discussions to pick up the whole scenario of this puzzle: <a href="http://codeblog.dhananjaynene.com/2010/01/find-the-largest-palindrome-made-from-the-product-of-two-3-digit-numbers/comment-page-1/#comment-48">1)</a> and <a href="http://pthree.org/2007/09/15/largest-palindromic-number-in-python/">2)</a>. Basically speaking, the first post listed the most straightforward thoughts, which is iterations two numbers both from 100 to 1000 and finding the maximum of the outcomes. While I wrote the algorithm, this is also the first idea came into mind while I added several optimizations on it.<br />1) Decrease one number 1 per step, and iterate the other one from 999 to 100.<br />2) Stop the step whenever it finds a palindrome and march to the next step by decrease the benchmark number by one.<br />3) Meanwhile, increase the lower bound of iterator from 100 to whenever it finds a palindrome. This will exponentially decrease the searching range. e.g. (A--benchmark number, B--iterator) if A*B==palindrome, the searching range for the next step would be [A-1, B]. Because if both numbers less than the previous finding, it must not be the LARGEST palindrome we would like to find.<br />4) The second stop criteria is the iterator equal or less than the lower bound mentioned in the last item.<br /><br />The major pitfall that I did see quite a few people mentioned is alternative decrease two numbers from 999, which the result comes to be 834*836=698896. The difference for two numbers are obviously unnecessary to be less or equal to one.<br /><br />The second reference provides the basic optimization from math point of view. All of the palindrome can be divided by 11, so...<br />P=100000x+10000y+1000z+100z+10y+x<br />P=100001x+10010y+1100z<br />P=11*(9091x+910y+100z)<br />Then, the question is simplified to find two 3-digit numbers, at least one of which should be divided by 11. Similarly as the previous method, if A can be divided by 11, decreasing B by one per time; and if A cannot divided by 11, decreasing B by 11 per time.<br /><br />My solutions for the first 5 puzzles are <a href="https://github.com/creasyw/learning/blob/master/puzzles/q001To005.c">here</a>.<br />cheers,</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[great resources for C.prog.lang]]></title>
    <link href="http://creasyw.github.io/blog/2011/04/24/great-resources-for-cproglang/"/>
    <updated>2011-04-24T00:00:00-04:00</updated>
    <id>http://creasyw.github.io/blog/2011/04/24/great-resources-for-cproglang</id>
    <content type="html"><![CDATA[<div class='post'>
Basic commands and references:<br /><a href="http://cprogramminglanguage.net/">C Programming Language</a><br /><a href="http://www.cprogramming.com/tutorial.html">C/C++ references</a><br /><a href="http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list">The Definitive C++ Book Guide and List</a><a href="http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list" target="_blank"></a><br /><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">Google C++ Style Guide</a><br /><a href="http://www.viva64.com/en/l/">Lessons on development of 64-bit C/C++ applications</a><br /><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-088-introduction-to-c-memory-management-and-c-object-oriented-programming-january-iap-2010/">MIT C/C++ Introductory course</a> <br /><a href="http://www.blogger.com/goog_157129008">Solution manual of "The C Programming Language" (Kernighan &amp; Ritchie)</a><br /><a href="http://coolshell.cn/articles/2365.html%20">两个C++的library</a><br /><a href="http://www.readwriteweb.com/hack/2011/06/free-e-books-on-c-and-cpp.php">Six free E-books on C and C++ </a><br /><br />Algorithms:<br /><a href="http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_hashtable.aspx">Complicated data structure and algorithms</a><br /><a href="http://coolshell.cn/articles/3961.html">“火柴棍式”程序员面试题 </a><br /><a href="http://coolshell.cn/articles/3790.html">如何调试makefile变量</a><br /><a href="http://coolshell.cn/articles/3738.html">打印质数的各种算法</a><br /><br />Suggestions &amp;&amp; methodologies:<br /><a href="http://programmers.stackexchange.com/questions/62502/small-c-projects">Small C projects</a><br /><a href="http://coolshell.cn/articles/2250.html">21 days vs. ten years</a> <br /><a href="http://coolshell.cn/articles/4102.html">如何学好C语言</a><br /><a href="http://coolshell.cn/articles/4119.html">如何学好C++</a><br /><a href="http://coolshell.cn/articles/2287.html">C++程序员自信心曲线</a><br /><a href="http://coolshell.cn/articles/830.html">语言的歧义</a><br /><a href="http://coolshell.cn/articles/551.html">C语言下的错误处理的问题</a><br /><br />In-depth discussions:<br /><a href="http://www.cs.bell-labs.com/who/dmr/primevalC.html">Primeval C: two very early compilers&nbsp; </a><br /><a href="http://eli.thegreenplace.net/2011/05/02/the-context-sensitivity-of-c%E2%80%99s-grammar-revisited/">The context sensitivity of C’s grammar</a><br /><a href="http://www.rs.io/c-is-a-wasteland/">C is a Wasteland </a><br /><a href="http://warp.povusers.org/programming/cplusplus_superior_to_c.html">Why C++ is vastly superior to C</a><br /><a href="http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php">Which programming languages are fastest?</a><br /><a href="http://www.codinghorror.com/blog/2007/03/top-6-list-of-programming-top-10-lists.html">Top 6 List of Programming Top 10 Lists</a><br />&nbsp;A Guide to Undefined Behavior in C and C++: <a href="http://blog.regehr.org/archives/213">Part1</a>, <a href="http://blog.regehr.org/archives/226">Part2</a>, <a href="http://blog.regehr.org/archives/232">Part3</a>.<br /><a href="http://www.syntax-k.de/projekte/go-review">Go Programming Language, Or: Why all C-like Programming Languages Except One Suck</a><br /><a href="http://blog.kowalczyk.info/article/af1h/Experience-porting-4k-lines-of-C-code-to-go.html">Experience porting 4k lines of C code&nbsp;</a> <br /><a href="http://www.johndcook.com/blog/2011/06/14/why-do-c-folks-make-things-so-complicated/">Why do C++ folks make things so complicated?</a><br /><a href="http://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope/6445794#6445794">Can a local variable's memory be accessed outside its scope? </a><br /><br />Some of my thoughts:<br />Keep writing in C to solve the algorithm problems.<br />Transform to Clojure/C++/Python whenever the application scenario needs.<br />Read more about Perl/Python/Java.<br />Try to solve some puzzles or challenges everyday</div>

]]></content>
  </entry>
  
</feed>
